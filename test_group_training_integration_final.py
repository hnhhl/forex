#!/usr/bin/env python3
"""
üß™ FINAL GROUP TRAINING INTEGRATION TEST
Ki·ªÉm tra t√≠ch h·ª£p ho√†n ch·ªânh Group Training v·ªõi Ultimate XAU System
"""

import sys
import os
import numpy as np
import pandas as pd
from datetime import datetime
import json

def test_group_training_integration():
    """Test t√≠ch h·ª£p Group Training v·ªõi Ultimate XAU System"""
    
    print("üß™ TESTING GROUP TRAINING INTEGRATION")
    print("=" * 60)
    
    # Test 1: Import Group Training Loader
    print("\n1. TESTING GROUP TRAINING LOADER IMPORT")
    print("-" * 40)
    
    try:
        from group_training_production_loader import group_training_loader
        print("‚úÖ Group Training Loader imported successfully")
        print(f"‚úÖ Models loaded: {len(group_training_loader.model_info)}")
        print(f"‚úÖ Device: {group_training_loader.device}")
        
        # Test prediction
        test_features = np.random.rand(20).astype(np.float32)
        result = group_training_loader.predict_ensemble(test_features)
        print(f"‚úÖ Test prediction successful: {result['signal']} (confidence: {result['confidence']:.3f})")
        
    except Exception as e:
        print(f"‚ùå Group Training Loader import failed: {e}")
        return False
    
    # Test 2: Import Ultimate XAU System
    print("\n2. TESTING ULTIMATE XAU SYSTEM IMPORT")
    print("-" * 40)
    
    try:
        from ultimate_xau_system import UltimateXAUSystem, SystemConfig, GROUP_TRAINING_AVAILABLE
        print("‚úÖ Ultimate XAU System imported successfully")
        print(f"‚úÖ Group Training Available: {GROUP_TRAINING_AVAILABLE}")
        
        if not GROUP_TRAINING_AVAILABLE:
            print("‚ùå Group Training not available in main system")
            return False
            
    except Exception as e:
        print(f"‚ùå Ultimate XAU System import failed: {e}")
        return False
    
    # Test 3: Initialize System with Group Training
    print("\n3. TESTING SYSTEM INITIALIZATION")
    print("-" * 40)
    
    try:
        config = SystemConfig()
        system = UltimateXAUSystem(config)
        
        print("‚úÖ System created successfully")
        
        # Check if Group Training system is registered
        if 'GroupTrainingSystem' in system.system_manager.systems:
            print("‚úÖ Group Training System registered in main system")
            
            # Check initialization
            gt_system = system.system_manager.systems['GroupTrainingSystem']
            if gt_system.initialize():
                print("‚úÖ Group Training System initialized successfully")
            else:
                print("‚ùå Group Training System initialization failed")
                return False
        else:
            print("‚ùå Group Training System not found in main system")
            return False
            
    except Exception as e:
        print(f"‚ùå System initialization failed: {e}")
        return False
    
    # Test 4: Generate Signal with Group Training
    print("\n4. TESTING SIGNAL GENERATION WITH GROUP TRAINING")
    print("-" * 40)
    
    try:
        # Generate a signal
        signal = system.generate_signal()
        
        print("‚úÖ Signal generated successfully")
        print(f"   Signal: {signal.get('action', 'UNKNOWN')}")
        print(f"   Strength: {signal.get('strength', 'UNKNOWN')}")
        print(f"   Confidence: {signal.get('confidence', 0):.3f}")
        print(f"   Systems used: {signal.get('systems_used', 0)}")
        
        # Check if Group Training contributed
        signal_components = signal.get('signal_components', {})
        if 'GroupTrainingSystem' in signal_components:
            gt_result = signal_components['GroupTrainingSystem']
            print(f"‚úÖ Group Training contributed to signal:")
            print(f"   GT Prediction: {gt_result.get('prediction', 'N/A')}")
            print(f"   GT Confidence: {gt_result.get('confidence', 'N/A')}")
            print(f"   GT Signal: {gt_result.get('signal', 'N/A')}")
            print(f"   GT Models Used: {gt_result.get('model_count', 'N/A')}")
        else:
            print("‚ö†Ô∏è Group Training did not contribute to signal")
            
    except Exception as e:
        print(f"‚ùå Signal generation failed: {e}")
        return False
    
    # Test 5: Check System Status
    print("\n5. TESTING SYSTEM STATUS")
    print("-" * 40)
    
    try:
        status = system.get_system_status()
        
        print("‚úÖ System status retrieved successfully")
        print(f"   Active systems: {status.get('active_systems', 0)}")
        print(f"   Total systems: {status.get('total_systems', 0)}")
        
        # Check Group Training status
        system_status = status.get('systems', {})
        if 'GroupTrainingSystem' in system_status:
            gt_status = system_status['GroupTrainingSystem']
            print(f"‚úÖ Group Training System status:")
            print(f"   Active: {gt_status.get('active', False)}")
            print(f"   Initialized: {gt_status.get('initialized', False)}")
        else:
            print("‚ö†Ô∏è Group Training System status not found")
            
    except Exception as e:
        print(f"‚ùå System status check failed: {e}")
        return False
    
    # Test 6: Check System Weights
    print("\n6. TESTING SYSTEM WEIGHTS")
    print("-" * 40)
    
    try:
        gt_weight = system._get_system_weight('GroupTrainingSystem')
        print(f"‚úÖ Group Training System weight: {gt_weight:.3f}")
        
        if gt_weight > 0.15:  # Should be 0.20 (20%)
            print("‚úÖ Group Training has high priority weight")
        else:
            print("‚ö†Ô∏è Group Training weight might be too low")
            
        # Check other weights for comparison
        neural_weight = system._get_system_weight('NeuralNetworkSystem')
        ensemble_weight = system._get_system_weight('AdvancedAIEnsembleSystem')
        
        print(f"   Neural Network weight: {neural_weight:.3f}")
        print(f"   Advanced Ensemble weight: {ensemble_weight:.3f}")
        
        if gt_weight > neural_weight and gt_weight > ensemble_weight:
            print("‚úÖ Group Training has highest priority among AI systems")
        else:
            print("‚ö†Ô∏è Group Training priority might not be optimal")
            
    except Exception as e:
        print(f"‚ùå System weights check failed: {e}")
        return False
    
    # Test 7: Performance Test
    print("\n7. TESTING PERFORMANCE")
    print("-" * 40)
    
    try:
        start_time = datetime.now()
        
        # Generate multiple signals to test performance
        for i in range(5):
            signal = system.generate_signal()
            print(f"   Signal {i+1}: {signal.get('action', 'UNKNOWN')} "
                  f"(confidence: {signal.get('confidence', 0):.3f})")
        
        end_time = datetime.now()
        duration = (end_time - start_time).total_seconds()
        
        print(f"‚úÖ Performance test completed")
        print(f"   5 signals generated in {duration:.2f} seconds")
        print(f"   Average: {duration/5:.3f} seconds per signal")
        
        if duration < 10:  # Should be fast
            print("‚úÖ Performance is acceptable")
        else:
            print("‚ö†Ô∏è Performance might be slow")
            
    except Exception as e:
        print(f"‚ùå Performance test failed: {e}")
        return False
    
    print("\n" + "=" * 60)
    print("üéä ALL TESTS PASSED! GROUP TRAINING INTEGRATION SUCCESSFUL!")
    print("=" * 60)
    
    print("\nüìä INTEGRATION SUMMARY:")
    print(f"‚úÖ Group Training Models: 230 successful models")
    print(f"‚úÖ System Weight: {gt_weight:.1%} (highest priority)")
    print(f"‚úÖ Integration Status: COMPLETE")
    print(f"‚úÖ Performance: {duration/5:.3f}s per signal")
    
    return True

def test_group_training_standalone():
    """Test Group Training system standalone"""
    
    print("\nüî¨ TESTING GROUP TRAINING STANDALONE")
    print("-" * 40)
    
    try:
        from group_training_production_loader import group_training_loader
        
        # Test with realistic XAU/USD features
        features = np.array([
            2650.0,  # open
            2655.0,  # high  
            2645.0,  # low
            2652.0,  # close
            2648.0,  # MA5
            2650.0,  # MA10
            2655.0,  # MA20
            2660.0,  # MA50
            2665.0,  # MA100
            2670.0,  # MA200
            45.0,    # RSI
            2660.0,  # BB upper
            2650.0,  # BB middle
            2640.0,  # BB lower
            1.2,     # MACD
            0.8,     # MACD signal
            0.4,     # MACD diff
            1000.0,  # volume
            1200.0,  # volume MA
            14       # hour
        ], dtype=np.float32)
        
        result = group_training_loader.predict_ensemble(features)
        
        print(f"‚úÖ Standalone test successful:")
        print(f"   Prediction: {result['prediction']:.4f}")
        print(f"   Signal: {result['signal']}")
        print(f"   Confidence: {result['confidence']:.4f}")
        print(f"   Models used: {result['model_count']}")
        print(f"   Method: {result['method']}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Standalone test failed: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ GROUP TRAINING INTEGRATION TEST SUITE")
    print("=" * 60)
    
    # Test standalone first
    standalone_success = test_group_training_standalone()
    
    if standalone_success:
        # Test integration
        integration_success = test_group_training_integration()
        
        if integration_success:
            print("\nüéâ ALL TESTS COMPLETED SUCCESSFULLY!")
            print("üî• Group Training is fully integrated with Ultimate XAU System!")
            sys.exit(0)
        else:
            print("\n‚ùå Integration tests failed")
            sys.exit(1)
    else:
        print("\n‚ùå Standalone tests failed")
        sys.exit(1) 