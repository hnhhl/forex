#!/usr/bin/env python3
"""
üß™ TEST GROUP TRAINING INTEGRATION
Ki·ªÉm tra t√≠ch h·ª£p Group Training models v·ªõi main system
"""

import sys
import os
import numpy as np
from datetime import datetime
from dataclasses import dataclass
from typing import Dict, Any

# Test imports
def test_imports():
    """Test import Group Training loader"""
    print("üß™ TESTING IMPORTS")
    print("-" * 50)
    
    try:
        from group_training_production_loader import group_training_loader
        print("‚úÖ Group Training Loader imported successfully")
        
        # Test loader initialization
        print(f"‚úÖ Model info count: {len(group_training_loader.model_info)}")
        print(f"‚úÖ Device: {group_training_loader.device}")
        
        return True
    except Exception as e:
        print(f"‚ùå Import failed: {e}")
        return False

def test_prediction():
    """Test prediction functionality"""
    print("\nüß™ TESTING PREDICTION")
    print("-" * 50)
    
    try:
        from group_training_production_loader import group_training_loader
        
        # Create dummy features (20 features)
        features = np.random.randn(20)
        
        # Test prediction
        result = group_training_loader.predict_ensemble(features)
        
        print(f"‚úÖ Prediction result:")
        print(f"   ‚Ä¢ Prediction: {result['prediction']:.4f}")
        print(f"   ‚Ä¢ Confidence: {result['confidence']:.4f}")
        print(f"   ‚Ä¢ Signal: {result['signal']}")
        print(f"   ‚Ä¢ Model Count: {result['model_count']}")
        print(f"   ‚Ä¢ Method: {result['method']}")
        
        # Validate result structure
        required_keys = ['prediction', 'confidence', 'signal', 'model_count', 'method']
        for key in required_keys:
            if key not in result:
                print(f"‚ùå Missing key: {key}")
                return False
        
        return True
    except Exception as e:
        print(f"‚ùå Prediction failed: {e}")
        return False

def test_main_system_integration():
    """Test integration with main system"""
    print("\nüß™ TESTING MAIN SYSTEM INTEGRATION")
    print("-" * 50)
    
    try:
        # Test import from main system
        sys.path.append('src')
        from core.integration.master_system import MasterIntegrationSystem, SystemConfig
        
        print("‚úÖ Main system imported successfully")
        
        # Check if GROUP_TRAINING_MODELS_AVAILABLE is True
        from core.integration.master_system import GROUP_TRAINING_MODELS_AVAILABLE
        print(f"‚úÖ Group Training Available: {GROUP_TRAINING_MODELS_AVAILABLE}")
        
        if not GROUP_TRAINING_MODELS_AVAILABLE:
            print("‚ùå Group Training models not available in main system")
            return False
        
        # Test system initialization
        config = SystemConfig()
        system = MasterIntegrationSystem(config)
        
        print("‚úÖ Master system initialized")
        
        # Test if _process_group_training_models method exists
        if hasattr(system, '_process_group_training_models'):
            print("‚úÖ _process_group_training_models method found")
        else:
            print("‚ùå _process_group_training_models method not found")
            return False
        
        return True
    except Exception as e:
        print(f"‚ùå Main system integration failed: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_signal_generation():
    """Test signal generation through main system"""
    print("\nüß™ TESTING SIGNAL GENERATION")
    print("-" * 50)
    
    try:
        sys.path.append('src')
        from core.integration.master_system import MasterIntegrationSystem, SystemConfig, MarketData
        
        # Create system
        config = SystemConfig()
        system = MasterIntegrationSystem(config)
        
        # Create dummy market data
        @dataclass
        class DummyMarketData:
            timestamp: datetime = datetime.now()
            symbol: str = "XAUUSD"
            price: float = 2000.0
            open_price: float = 1999.0
            high_price: float = 2001.0
            low_price: float = 1998.0
            volume: float = 1000.0
            technical_indicators: Dict[str, Any] = None
            
            def __post_init__(self):
                if self.technical_indicators is None:
                    self.technical_indicators = {
                        'ma_5': 2000.5,
                        'ma_10': 2000.0,
                        'ma_20': 1999.5,
                        'ma_50': 1999.0,
                        'ma_100': 1998.5,
                        'ma_200': 1998.0,
                        'rsi': 55.0,
                        'bb_upper': 2002.0,
                        'bb_middle': 2000.0,
                        'bb_lower': 1998.0,
                        'macd': 0.5,
                        'macd_signal': 0.3,
                        'macd_histogram': 0.2,
                        'volume_ma': 1000.0,
                        'volatility': 0.5
                    }
        
        market_data = DummyMarketData()
        
        # Test Group Training signal generation
        signal = system._process_group_training_models(market_data)
        
        if signal:
            print("‚úÖ Signal generated successfully:")
            print(f"   ‚Ä¢ Type: {signal.signal_type}")
            print(f"   ‚Ä¢ Confidence: {signal.confidence:.4f}")
            print(f"   ‚Ä¢ Source: {signal.source}")
            print(f"   ‚Ä¢ Risk Score: {signal.risk_score:.4f}")
            print(f"   ‚Ä¢ Metadata: {signal.metadata}")
            return True
        else:
            print("‚ùå No signal generated")
            return False
            
    except Exception as e:
        print(f"‚ùå Signal generation failed: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_production_readiness():
    """Test production readiness"""
    print("\nüß™ TESTING PRODUCTION READINESS")
    print("-" * 50)
    
    try:
        # Check required files exist
        required_files = [
            'group_training_production_loader.py',
            'group_training_scaler.pkl',
            'group_training_config.json',
            'group_training_registry.json'
        ]
        
        for file in required_files:
            if os.path.exists(file):
                print(f"‚úÖ {file} exists")
            else:
                print(f"‚ùå {file} missing")
                return False
        
        # Test configuration
        import json
        with open('group_training_config.json', 'r') as f:
            config = json.load(f)
        
        print(f"‚úÖ Config loaded:")
        print(f"   ‚Ä¢ Enabled: {config['group_training_integration']['enabled']}")
        print(f"   ‚Ä¢ Model Count: {config['group_training_integration']['model_count']}")
        print(f"   ‚Ä¢ Best Accuracy: {config['group_training_integration']['best_accuracy']}")
        
        # Test registry
        with open('group_training_registry.json', 'r') as f:
            registry = json.load(f)
        
        print(f"‚úÖ Registry loaded:")
        print(f"   ‚Ä¢ Total Models Trained: {registry['total_models_trained']}")
        print(f"   ‚Ä¢ Production Models: {registry['production_models']}")
        print(f"   ‚Ä¢ Registry Version: {registry['registry_version']}")
        
        return True
    except Exception as e:
        print(f"‚ùå Production readiness failed: {e}")
        return False

def main():
    """Main test function"""
    print("üß™ GROUP TRAINING INTEGRATION TEST")
    print("=" * 60)
    print(f"Timestamp: {datetime.now()}")
    print()
    
    tests = [
        ("Imports", test_imports),
        ("Prediction", test_prediction),
        ("Main System Integration", test_main_system_integration),
        ("Signal Generation", test_signal_generation),
        ("Production Readiness", test_production_readiness)
    ]
    
    results = {}
    
    for test_name, test_func in tests:
        try:
            results[test_name] = test_func()
        except Exception as e:
            print(f"‚ùå Test {test_name} crashed: {e}")
            results[test_name] = False
    
    # Summary
    print("\n" + "=" * 60)
    print("üèÅ INTEGRATION TEST RESULTS")
    print("=" * 60)
    
    passed = sum(results.values())
    total = len(results)
    
    for test_name, result in results.items():
        status = "‚úÖ PASS" if result else "‚ùå FAIL"
        print(f"{test_name}: {status}")
    
    print(f"\nOverall: {passed}/{total} tests passed ({passed/total*100:.1f}%)")
    
    if passed == total:
        print("\nüéâ ALL TESTS PASSED!")
        print("‚úÖ Group Training models are successfully integrated with main system!")
        print("‚úÖ Ready for production deployment!")
    else:
        print(f"\n‚ö†Ô∏è {total-passed} TESTS FAILED")
        print("‚ùå Integration not complete - needs fixing")
    
    return passed == total

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 