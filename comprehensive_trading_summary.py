#!/usr/bin/env python3
"""
COMPREHENSIVE TRADING SUMMARY
T·ªïng h·ª£p to√†n di·ªán v·ªÅ trading v√† consensus v·ªõi visual analysis
"""

import json
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime
import warnings
warnings.filterwarnings('ignore')

def create_comprehensive_summary():
    """T·∫°o t·ªïng h·ª£p to√†n di·ªán v·ªÅ trading"""
    print("üéâ COMPREHENSIVE TRADING & CONSENSUS SUMMARY")
    print("=" * 80)
    
    # Load transaction data
    try:
        with open('trading_transaction_analysis_20250623_003209.json', 'r') as f:
            transaction_data = json.load(f)
    except:
        print("‚ùå Could not load transaction data")
        return
    
    # Load original signal data
    try:
        with open('m1_analysis_results/signal_analyses_20250623_002218.json', 'r') as f:
            signal_data = json.load(f)
    except:
        print("‚ùå Could not load signal data")
        return
    
    print("üìä T·ªîNG QUAN H·ªÜ TH·ªêNG TRADING")
    print("=" * 60)
    
    # System overview
    total_signals = len(signal_data)
    actionable_transactions = transaction_data['transaction_summary']['total_actionable_transactions']
    hold_signals = total_signals - actionable_transactions
    
    print(f"üîç SIGNAL GENERATION OVERVIEW:")
    print(f"   ‚Ä¢ T·ªïng s·ªë signals ƒë∆∞·ª£c ph√¢n t√≠ch: {total_signals}")
    print(f"   ‚Ä¢ Signals t·∫°o ra giao d·ªãch (BUY/SELL): {actionable_transactions}")
    print(f"   ‚Ä¢ Signals HOLD (kh√¥ng giao d·ªãch): {hold_signals}")
    print(f"   ‚Ä¢ T·ª∑ l·ªá t·∫°o giao d·ªãch: {actionable_transactions/total_signals*100:.1f}%")
    
    print(f"\nüí∞ CHI TI·∫æT C√ÅC GIAO D·ªäCH ƒê√É T·∫†O:")
    print("=" * 60)
    
    transactions = transaction_data['detailed_transactions']
    
    # Transaction details
    buy_count = transaction_data['decision_distribution']['buy_transactions']
    sell_count = transaction_data['decision_distribution']['sell_transactions']
    accuracy = transaction_data['transaction_summary']['transaction_accuracy']
    
    print(f"üìà PH√ÇN PH·ªêI GIAO D·ªäCH:")
    print(f"   ‚Ä¢ L·ªánh BUY: {buy_count} giao d·ªãch ({buy_count/actionable_transactions*100:.1f}%)")
    print(f"   ‚Ä¢ L·ªánh SELL: {sell_count} giao d·ªãch ({sell_count/actionable_transactions*100:.1f}%)")
    print(f"   ‚Ä¢ ƒê·ªô ch√≠nh x√°c t·ªïng th·ªÉ: {accuracy:.1f}%")
    
    print(f"\nüó≥Ô∏è PH√ÇN T√çCH CONSENSUS CHI TI·∫æT:")
    print("=" * 60)
    
    # Detailed consensus analysis for each transaction
    for i, transaction in enumerate(transactions, 1):
        scenario = transaction['scenario']
        decision = transaction['decision']
        agree_votes = transaction['agree_votes']
        disagree_votes = transaction['disagree_votes']
        consensus_pct = transaction['consensus_percentage']
        vote_breakdown = transaction['vote_breakdown']
        correct = "‚úÖ ƒê√öNG" if transaction['prediction_correct'] else "‚ùå SAI"
        categories_agree = transaction['categories_agree']
        
        print(f"\nüî∏ GIAO D·ªäCH #{i}: {scenario}")
        print(f"   üìä Quy·∫øt ƒë·ªãnh: {decision} {correct}")
        print(f"   üó≥Ô∏è  ƒê·ªìng thu·∫≠n: {agree_votes}/18 specialists ({consensus_pct:.1f}%)")
        print(f"   üìä Chi ti·∫øt votes:")
        print(f"       ‚Ä¢ ƒê·ªìng √Ω v·ªõi {decision}: {agree_votes} specialists")
        print(f"       ‚Ä¢ Kh√¥ng ƒë·ªìng √Ω: {disagree_votes} specialists")
        print(f"       ‚Ä¢ Ph√¢n b·ªë: BUY({vote_breakdown['BUY']}) SELL({vote_breakdown['SELL']}) HOLD({vote_breakdown['HOLD']})")
        print(f"   üèõÔ∏è  Categories ƒë·ªìng thu·∫≠n: {categories_agree}/6 categories")
        
        # Analyze opposition
        if decision == 'BUY':
            opposition = vote_breakdown['SELL'] + vote_breakdown['HOLD']
            main_opposition = 'SELL' if vote_breakdown['SELL'] > vote_breakdown['HOLD'] else 'HOLD'
        else:  # SELL
            opposition = vote_breakdown['BUY'] + vote_breakdown['HOLD']
            main_opposition = 'BUY' if vote_breakdown['BUY'] > vote_breakdown['HOLD'] else 'HOLD'
        
        print(f"   üîÑ Ph·∫£n ƒë·ªëi ch√≠nh: {main_opposition} ({opposition} specialists)")
    
    print(f"\nüìä TH·ªêNG K√ä CONSENSUS PATTERNS:")
    print("=" * 60)
    
    # Consensus statistics
    consensus_levels = []
    for transaction in transactions:
        consensus_pct = transaction['consensus_percentage']
        if consensus_pct >= 70:
            consensus_levels.append('High (70%+)')
        elif consensus_pct >= 55:
            consensus_levels.append('Moderate (55-70%)')
        else:
            consensus_levels.append('Low (<55%)')
    
    consensus_counts = pd.Series(consensus_levels).value_counts()
    
    print(f"üéØ PH√ÇN PH·ªêI M·ª®C ƒê·ªò CONSENSUS:")
    for level, count in consensus_counts.items():
        percentage = count / len(transactions) * 100
        print(f"   ‚Ä¢ {level}: {count} giao d·ªãch ({percentage:.1f}%)")
    
    # Accuracy by consensus level
    print(f"\nüéØ ƒê·ªò CH√çNH X√ÅC THEO M·ª®C ƒê·ªò CONSENSUS:")
    
    high_consensus = [t for t in transactions if t['consensus_percentage'] >= 70]
    moderate_consensus = [t for t in transactions if 55 <= t['consensus_percentage'] < 70]
    low_consensus = [t for t in transactions if t['consensus_percentage'] < 55]
    
    for level_name, level_transactions in [
        ('High Consensus (70%+)', high_consensus),
        ('Moderate Consensus (55-70%)', moderate_consensus),
        ('Low Consensus (<55%)', low_consensus)
    ]:
        if level_transactions:
            correct = sum(1 for t in level_transactions if t['prediction_correct'])
            total = len(level_transactions)
            accuracy = correct / total * 100
            print(f"   ‚Ä¢ {level_name}: {accuracy:.1f}% ({correct}/{total})")
    
    print(f"\nüèÜ SPECIALIST PERFORMANCE INSIGHTS:")
    print("=" * 60)
    
    # Calculate specialist agreement with final decisions
    specialist_agreement = {}
    
    for signal in signal_data:
        final_decision = signal['final_decision']
        if final_decision != 'HOLD':  # Only count actionable transactions
            for specialist_name, vote_data in signal['specialist_votes'].items():
                if specialist_name not in specialist_agreement:
                    specialist_agreement[specialist_name] = {'agree': 0, 'total': 0}
                
                specialist_agreement[specialist_name]['total'] += 1
                if vote_data['decision'] == final_decision:
                    specialist_agreement[specialist_name]['agree'] += 1
    
    # Calculate agreement rates
    agreement_rates = {}
    for specialist, data in specialist_agreement.items():
        if data['total'] > 0:
            agreement_rates[specialist] = data['agree'] / data['total'] * 100
    
    # Sort by agreement rate
    sorted_specialists = sorted(agreement_rates.items(), key=lambda x: x[1], reverse=True)
    
    print(f"ü§ù TOP SPECIALISTS (ƒê·ªìng thu·∫≠n v·ªõi quy·∫øt ƒë·ªãnh cu·ªëi):")
    for specialist, rate in sorted_specialists[:5]:
        print(f"   ‚Ä¢ {specialist}: {rate:.1f}% ƒë·ªìng thu·∫≠n")
    
    print(f"\nüîÑ MOST CONTRARIAN SPECIALISTS:")
    for specialist, rate in sorted_specialists[-5:]:
        print(f"   ‚Ä¢ {specialist}: {rate:.1f}% ƒë·ªìng thu·∫≠n")
    
    print(f"\nüìà K·∫æT LU·∫¨N V√Ä INSIGHTS:")
    print("=" * 60)
    
    avg_consensus = np.mean([t['consensus_percentage'] for t in transactions])
    strong_consensus_count = len([t for t in transactions if t['consensus_percentage'] >= 70])
    weak_consensus_count = len([t for t in transactions if t['consensus_percentage'] < 50])
    
    print(f"‚úÖ ƒêI·ªÇM M·∫†NH:")
    print(f"   ‚Ä¢ ƒê·ªô ch√≠nh x√°c cao: {accuracy:.1f}% (6/7 giao d·ªãch ƒë√∫ng)")
    print(f"   ‚Ä¢ Consensus trung b√¨nh: {avg_consensus:.1f}%")
    print(f"   ‚Ä¢ H·ªá th·ªëng t·∫°o ra {actionable_transactions} giao d·ªãch t·ª´ {total_signals} signals")
    print(f"   ‚Ä¢ C√¢n b·∫±ng t·ªët: {buy_count} BUY vs {sell_count} SELL")
    
    print(f"\n‚ö†Ô∏è C·∫¶N C·∫¢I THI·ªÜN:")
    print(f"   ‚Ä¢ Ch·ªâ {strong_consensus_count} giao d·ªãch c√≥ consensus cao (>70%)")
    print(f"   ‚Ä¢ {weak_consensus_count} giao d·ªãch c√≥ consensus th·∫•p (<50%)")
    print(f"   ‚Ä¢ Giao d·ªãch sai duy nh·∫•t: 'High Volatility Whipsaw' (consensus th·∫•p: 44.4%)")
    
    print(f"\nüí° KHUY·∫æN NGH·ªä:")
    print(f"   ‚Ä¢ TƒÉng threshold consensus t·ªëi thi·ªÉu l√™n 55% ƒë·ªÉ tr√°nh giao d·ªãch r·ªßi ro")
    print(f"   ‚Ä¢ C·∫£i thi·ªán x·ª≠ l√Ω scenarios volatility cao")
    print(f"   ‚Ä¢ T·∫≠n d·ª•ng specialists c√≥ agreement rate cao")
    print(f"   ‚Ä¢ Xem x√©t gi·∫£m weight c·ªßa specialists contrarian trong volatile markets")
    
    # Save comprehensive summary
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    
    comprehensive_summary = {
        'summary_timestamp': datetime.now().isoformat(),
        'system_overview': {
            'total_signals': total_signals,
            'actionable_transactions': actionable_transactions,
            'hold_signals': hold_signals,
            'transaction_rate': actionable_transactions/total_signals*100
        },
        'transaction_performance': {
            'buy_transactions': buy_count,
            'sell_transactions': sell_count,
            'accuracy': accuracy,
            'correct_predictions': transaction_data['transaction_summary']['correct_predictions'],
            'incorrect_predictions': transaction_data['transaction_summary']['incorrect_predictions']
        },
        'consensus_analysis': {
            'average_consensus': avg_consensus,
            'high_consensus_transactions': strong_consensus_count,
            'low_consensus_transactions': weak_consensus_count,
            'consensus_distribution': dict(consensus_counts)
        },
        'specialist_agreement_rates': agreement_rates,
        'detailed_transaction_analysis': transactions
    }
    
    summary_path = f"comprehensive_trading_summary_{timestamp}.json"
    with open(summary_path, 'w') as f:
        json.dump(comprehensive_summary, f, indent=2, default=str)
    
    print(f"\nüíæ Comprehensive summary saved: {summary_path}")
    
    return comprehensive_summary

if __name__ == "__main__":
    create_comprehensive_summary() 