#!/usr/bin/env python3
"""
PH√ÇN T√çCH VAI TR√í V√Ä M·ª®C ƒê·ªò QUY·∫æT ƒê·ªäNH C·ª¶A T·ª™NG TH√ÄNH PH·∫¶N
Trong qu√° tr√¨nh t·∫°o signal c·ªßa h·ªá th·ªëng AI3.0
"""

import sys
sys.path.append('src/core')

def analyze_system_roles():
    """Ph√¢n t√≠ch vai tr√≤ c·ªßa t·ª´ng h·ªá th·ªëng trong signal generation"""
    print("üéØ PH√ÇN T√çCH VAI TR√í V√Ä M·ª®C ƒê·ªò QUY·∫æT ƒê·ªäNH")
    print("=" * 60)
    
    try:
        from ultimate_xau_system import UltimateXAUSystem, SystemConfig
        
        # Initialize system
        config = SystemConfig()
        system = UltimateXAUSystem(config)
        
        print("\nüìä 1. TR·ªåNG S·ªê C∆† B·∫¢N C·ª¶A C√ÅC H·ªÜ TH·ªêNG")
        print("-" * 40)
        
        # Analyze base weights
        base_weights = {
            'NeuralNetworkSystem': 0.25,        # 25% - VAI TR√í CH√çNH
            'MT5ConnectionManager': 0.20,       # 20% - VAI TR√í QUAN TR·ªåNG
            'AdvancedAIEnsembleSystem': 0.20,   # 20% - VAI TR√í QUAN TR·ªåNG
            'DataQualityMonitor': 0.15,         # 15% - VAI TR√í H·ªñ TR·ª¢
            'AIPhaseSystem': 0.15,              # 15% - VAI TR√í H·ªñ TR·ª¢
            'RealTimeMT5DataSystem': 0.15,      # 15% - VAI TR√í H·ªñ TR·ª¢
            'AI2AdvancedTechnologiesSystem': 0.10,  # 10% - VAI TR√í PH·ª§
            'LatencyOptimizer': 0.10,           # 10% - VAI TR√í PH·ª§
        }
        
        # Sort by weight
        sorted_systems = sorted(base_weights.items(), key=lambda x: x[1], reverse=True)
        
        for system_name, weight in sorted_systems:
            role = get_system_role(weight)
            print(f"   {role} {system_name}: {weight:.1%}")
        
        print("\nüé≠ 2. HYBRID ENSEMBLE DECISION PROCESS")
        print("-" * 40)
        
        print("   Step 1: AI2.0 Weighted Average (70% influence)")
        print("   ‚Ä¢ M·ªói system ƒë√≥ng g√≥p theo tr·ªçng s·ªë")
        print("   ‚Ä¢ NeuralNetworkSystem c√≥ ·∫£nh h∆∞·ªüng l·ªõn nh·∫•t")
        print("   ‚Ä¢ Weighted prediction = Œ£(prediction √ó weight)")
        
        print("\n   Step 2: AI3.0 Democratic Consensus (30% influence)")
        print("   ‚Ä¢ M·ªói system vote BUY/SELL/HOLD")
        print("   ‚Ä¢ ƒê·∫øm votes v√† t√≠nh consensus ratio")
        print("   ‚Ä¢ Democratic decision = majority vote")
        
        print("\n   Step 3: Hybrid Consensus Calculation")
        print("   ‚Ä¢ Hybrid = (consensus_ratio √ó 0.7) + (agreement √ó 0.3)")
        print("   ‚Ä¢ Final confidence = base_confidence √ó hybrid_consensus")
        
        print("\nüèÜ 3. C√ÅC H·ªÜ TH·ªêNG VAI TR√í CH√çNH")
        print("-" * 40)
        
        main_systems = [
            ('NeuralNetworkSystem', 25, 'Quy·∫øt ƒë·ªãnh ch√≠nh - AI prediction'),
            ('MT5ConnectionManager', 20, 'D·ªØ li·ªáu th·ªã tr∆∞·ªùng real-time'),
            ('AdvancedAIEnsembleSystem', 20, 'Ensemble AI models'),
        ]
        
        for name, weight, description in main_systems:
            print(f"   üéØ {name}")
            print(f"      ‚Ä¢ Tr·ªçng s·ªë: {weight}%")
            print(f"      ‚Ä¢ Vai tr√≤: {description}")
            print(f"      ‚Ä¢ M·ª©c ƒë·ªô ·∫£nh h∆∞·ªüng: CH√çNH")
            print()
        
        print("üîß 4. C√ÅC H·ªÜ TH·ªêNG VAI TR√í H·ªñ TR·ª¢")
        print("-" * 40)
        
        support_systems = [
            ('DataQualityMonitor', 15, 'Ki·ªÉm tra ch·∫•t l∆∞·ª£ng d·ªØ li·ªáu'),
            ('AIPhaseSystem', 15, '6 Phases AI enhancement (+12% boost)'),
            ('RealTimeMT5DataSystem', 15, 'Streaming data t·ª´ MT5'),
        ]
        
        for name, weight, description in support_systems:
            print(f"   üõ†Ô∏è {name}")
            print(f"      ‚Ä¢ Tr·ªçng s·ªë: {weight}%")
            print(f"      ‚Ä¢ Vai tr√≤: {description}")
            print(f"      ‚Ä¢ M·ª©c ƒë·ªô ·∫£nh h∆∞·ªüng: H·ªñ TR·ª¢")
            print()
        
        print("‚öôÔ∏è 5. C√ÅC H·ªÜ TH·ªêNG VAI TR√í PH·ª§")
        print("-" * 40)
        
        minor_systems = [
            ('AI2AdvancedTechnologiesSystem', 10, 'Advanced AI techniques (+15% boost)'),
            ('LatencyOptimizer', 10, 'T·ªëi ∆∞u hi·ªáu su·∫•t h·ªá th·ªëng'),
        ]
        
        for name, weight, description in minor_systems:
            print(f"   ‚ö° {name}")
            print(f"      ‚Ä¢ Tr·ªçng s·ªë: {weight}%")
            print(f"      ‚Ä¢ Vai tr√≤: {description}")
            print(f"      ‚Ä¢ M·ª©c ƒë·ªô ·∫£nh h∆∞·ªüng: PH·ª§")
            print()
        
        print("üé≤ 6. DYNAMIC WEIGHT ADJUSTMENT")
        print("-" * 40)
        
        print("   Performance Multiplier Formula:")
        print("   ‚Ä¢ accuracy_multiplier = 0.5 + avg_accuracy")
        print("   ‚Ä¢ confidence_multiplier = 1.0 + (total_votes / 1000)")
        print("   ‚Ä¢ final_weight = base_weight √ó accuracy_multiplier √ó confidence_multiplier")
        print()
        print("   V√≠ d·ª•:")
        print("   ‚Ä¢ NeuralNetwork v·ªõi 80% accuracy: 0.25 √ó (0.5 + 0.8) = 0.325 (30% tƒÉng)")
        print("   ‚Ä¢ DataQuality v·ªõi 60% accuracy: 0.15 √ó (0.5 + 0.6) = 0.165 (10% tƒÉng)")
        
        print("\nüéØ 7. QUY·∫æT ƒê·ªäNH CU·ªêI C√ôNG")
        print("-" * 40)
        
        print("   Decision Logic Thresholds:")
        print("   ‚Ä¢ STRONG BUY: signal_strength > 0.2 AND hybrid_consensus >= 0.5")
        print("   ‚Ä¢ MODERATE BUY: signal_strength > 0.04 AND hybrid_consensus >= 0.5")
        print("   ‚Ä¢ STRONG SELL: signal_strength < -0.2 AND hybrid_consensus >= 0.5")
        print("   ‚Ä¢ MODERATE SELL: signal_strength < -0.04 AND hybrid_consensus >= 0.5")
        print("   ‚Ä¢ HOLD: T·∫•t c·∫£ tr∆∞·ªùng h·ª£p kh√°c")
        
        print("\nüìà 8. M·ª®C ƒê·ªò ·∫¢NH H∆Ø·ªûNG TH·ª∞C T·∫æ")
        print("-" * 40)
        
        # Generate a test signal to show real influence
        signal = system.generate_signal()
        
        if 'systems_used' in signal:
            print(f"   S·ªë systems tham gia: {signal['systems_used']}")
            print(f"   Action quy·∫øt ƒë·ªãnh: {signal['action']}")
            print(f"   Confidence: {signal['confidence']:.1%}")
            
            if 'voting_results' in signal:
                votes = signal['voting_results']
                total = votes['buy_votes'] + votes['sell_votes'] + votes['hold_votes']
                print(f"   Vote distribution:")
                print(f"   ‚Ä¢ BUY: {votes['buy_votes']}/{total} ({votes['buy_votes']/total:.1%})")
                print(f"   ‚Ä¢ SELL: {votes['sell_votes']}/{total} ({votes['sell_votes']/total:.1%})")
                print(f"   ‚Ä¢ HOLD: {votes['hold_votes']}/{total} ({votes['hold_votes']/total:.1%})")
            
            if 'hybrid_metrics' in signal:
                metrics = signal['hybrid_metrics']
                print(f"   Hybrid consensus: {metrics['hybrid_consensus']:.1%}")
                print(f"   Signal strength: {metrics['signal_strength']:.3f}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error: {e}")
        import traceback
        traceback.print_exc()
        return False

def get_system_role(weight):
    """X√°c ƒë·ªãnh vai tr√≤ d·ª±a tr√™n tr·ªçng s·ªë"""
    if weight >= 0.20:
        return "üéØ VAI TR√í CH√çNH   "
    elif weight >= 0.15:
        return "üõ†Ô∏è VAI TR√í H·ªñ TR·ª¢ "
    else:
        return "‚ö° VAI TR√í PH·ª§    "

def analyze_18_specialists_roles():
    """Ph√¢n t√≠ch vai tr√≤ c·ªßa 18 specialists trong democratic voting"""
    print("\n" + "="*60)
    print("üó≥Ô∏è PH√ÇN T√çCH VAI TR√í 18 SPECIALISTS")
    print("="*60)
    
    specialists_by_category = {
        'Technical (3 specialists)': {
            'weight': '16.7%',
            'specialists': ['RSI_Specialist', 'MACD_Specialist', 'Fibonacci_Specialist'],
            'role': 'Ph√¢n t√≠ch k·ªπ thu·∫≠t c∆° b·∫£n',
            'influence': 'TRUNG B√åNH'
        },
        'Sentiment (3 specialists)': {
            'weight': '16.7%', 
            'specialists': ['News_Sentiment', 'Social_Media', 'Fear_Greed'],
            'role': 'Ph√¢n t√≠ch t√¢m l√Ω th·ªã tr∆∞·ªùng',
            'influence': 'TH·∫§P (c·∫ßn data th·ª±c)'
        },
        'Pattern (3 specialists)': {
            'weight': '16.7%',
            'specialists': ['Chart_Pattern', 'Candlestick', 'Wave_Analysis'],
            'role': 'Nh·∫≠n d·∫°ng m√¥ h√¨nh gi√°',
            'influence': 'CAO'
        },
        'Risk (3 specialists)': {
            'weight': '16.7%',
            'specialists': ['VaR_Risk', 'Drawdown', 'Position_Size'],
            'role': 'Qu·∫£n l√Ω r·ªßi ro',
            'influence': 'TRUNG B√åNH'
        },
        'Momentum (3 specialists)': {
            'weight': '16.7%',
            'specialists': ['Trend', 'Mean_Reversion', 'Breakout'],
            'role': 'Ph√¢n t√≠ch ƒë·ªông l∆∞·ª£ng',
            'influence': 'R·∫§T CAO (75% accuracy)'
        },
        'Volatility (3 specialists)': {
            'weight': '16.7%',
            'specialists': ['ATR', 'Bollinger', 'Volatility_Clustering'],
            'role': 'Ph√¢n t√≠ch bi·∫øn ƒë·ªông',
            'influence': 'TRUNG B√åNH'
        }
    }
    
    print("üìä Democratic Voting Process:")
    print("   ‚Ä¢ M·ªói specialist vote: BUY/SELL/HOLD")
    print("   ‚Ä¢ Consensus threshold: 12/18 specialists (67%)")
    print("   ‚Ä¢ Category weighting d·ª±a tr√™n market conditions")
    print("   ‚Ä¢ Final decision: Majority vote v·ªõi confidence weighting")
    
    print("\nüèÜ Ranking theo Performance (t·ª´ test scenarios):")
    performance_ranking = [
        ('Fibonacci_Specialist', 87.5, 'Technical'),
        ('Mean_Reversion_Specialist', 87.5, 'Momentum'),
        ('Candlestick_Specialist', 75.0, 'Pattern'),
        ('Trend_Specialist', 75.0, 'Momentum'),
        ('MACD_Specialist', 62.5, 'Technical'),
    ]
    
    for i, (name, accuracy, category) in enumerate(performance_ranking, 1):
        print(f"   {i}. {name}: {accuracy}% accuracy ({category})")
    
    print(f"\nüìà Category Performance:")
    for category, info in specialists_by_category.items():
        print(f"   {category}: {info['influence']} influence")
        print(f"      ‚Ä¢ Role: {info['role']}")
        print(f"      ‚Ä¢ Weight: {info['weight']} per category")
    
    print("\nüéØ Consensus Analysis t·ª´ Real Data:")
    print("   ‚Ä¢ High consensus (>70%): 100% accuracy")
    print("   ‚Ä¢ Medium consensus (55-70%): 75% accuracy")  
    print("   ‚Ä¢ Low consensus (<55%): 50% accuracy")
    print("   ‚Ä¢ Transaction rate: 12.4% (conservative approach)")

if __name__ == "__main__":
    success = analyze_system_roles()
    if success:
        analyze_18_specialists_roles()
        print("\nüéâ PH√ÇN T√çCH HO√ÄN T·∫§T!")
        print("\nüìã T√ìM T·∫ÆT VAI TR√í:")
        print("   üéØ CH√çNH: NeuralNetwork (25%), MT5Connection (20%), AIEnsemble (20%)")
        print("   üõ†Ô∏è H·ªñ TR·ª¢: DataQuality (15%), AIPhases (15%), RealTimeMT5 (15%)")
        print("   ‚ö° PH·ª§: AI2Advanced (10%), LatencyOptimizer (10%)")
        print("   üó≥Ô∏è DEMOCRATIC: 18 specialists v·ªõi equal voting rights")
    else:
        print("\n‚ùå PH√ÇN T√çCH TH·∫§T B·∫†I!") 