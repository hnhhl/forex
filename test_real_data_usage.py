#!/usr/bin/env python3
"""
Test script ƒë·ªÉ ki·ªÉm tra xem Ultimate XAU System c√≥ ƒëang s·ª≠ d·ª•ng d·ªØ li·ªáu th·ª±c t·∫ø t·ª´ MT5 hay kh√¥ng
"""

import sys
import os
import pandas as pd
from datetime import datetime
import json

# Add src to path
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

def test_real_data_availability():
    """Ki·ªÉm tra d·ªØ li·ªáu th·ª±c t·∫ø c√≥ s·∫µn kh√¥ng"""
    print("üîç KI·ªÇM TRA D·ªÆ LI·ªÜU TH·ª∞C T·∫æ")
    print("=" * 50)
    
    data_dir = "data/maximum_mt5_v2"
    
    if not os.path.exists(data_dir):
        print("‚ùå Th∆∞ m·ª•c d·ªØ li·ªáu kh√¥ng t·ªìn t·∫°i!")
        return False
    
    # Ki·ªÉm tra summary file
    summary_file = f"{data_dir}/collection_summary_20250618_115847.json"
    if os.path.exists(summary_file):
        with open(summary_file, 'r') as f:
            summary = json.load(f)
        
        print(f"‚úÖ T·ªïng s·ªë records: {summary['total_records']:,}")
        print(f"‚úÖ S·ªë timeframes: {summary['total_timeframes']}")
        print(f"‚úÖ Symbol: {summary['symbol']}")
        print()
        
        # Ki·ªÉm tra t·ª´ng timeframe
        for tf, info in summary['timeframes'].items():
            print(f"   {tf}: {info['records']:,} records ({info['start_date']} ‚Üí {info['end_date']})")
    
    # Test load m·ªôt file d·ªØ li·ªáu
    h1_file = f"{data_dir}/XAUUSDc_H1_20250618_115847.csv"
    if os.path.exists(h1_file):
        print(f"\nüìä TEST LOAD D·ªÆ LI·ªÜU H1:")
        data = pd.read_csv(h1_file)
        print(f"   Shape: {data.shape}")
        print(f"   Columns: {list(data.columns)}")
        print(f"   Time range: {data['time'].min()} ‚Üí {data['time'].max()}")
        print(f"   Sample data:")
        print(data.head(3).to_string())
        return True
    
    return False

def test_system_data_usage():
    """Test xem h·ªá th·ªëng c√≥ s·ª≠ d·ª•ng d·ªØ li·ªáu th·ª±c t·∫ø kh√¥ng"""
    print("\nüß™ TEST H·ªÜ TH·ªêNG S·ª¨ D·ª§NG D·ªÆ LI·ªÜU")
    print("=" * 50)
    
    try:
        from core.ultimate_xau_system import UltimateXAUSystem, SystemConfig
        
        # T·∫°o h·ªá th·ªëng v·ªõi config m·∫∑c ƒë·ªãnh
        config = SystemConfig()
        system = UltimateXAUSystem(config)
        
        print("‚úÖ H·ªá th·ªëng kh·ªüi t·∫°o th√†nh c√¥ng")
        
        # Test fallback data function
        print("\nüìà TEST FALLBACK DATA FUNCTION:")
        fallback_data = system._get_fallback_data("XAUUSDc")
        
        if not fallback_data.empty:
            print(f"   Data shape: {fallback_data.shape}")
            print(f"   Columns: {list(fallback_data.columns)}")
            
            # Ki·ªÉm tra xem c√≥ ph·∫£i d·ªØ li·ªáu th·ª±c t·∫ø kh√¥ng
            if 'time' in fallback_data.columns:
                time_range = pd.to_datetime(fallback_data['time'])
                print(f"   Time range: {time_range.min()} ‚Üí {time_range.max()}")
                
                # Ki·ªÉm tra xem c√≥ ph·∫£i d·ªØ li·ªáu fake kh√¥ng (fake data c√≥ pattern ƒë·∫∑c bi·ªát)
                if len(fallback_data) > 100:
                    price_data = fallback_data['close'] if 'close' in fallback_data.columns else fallback_data.get('price', [])
                    if len(price_data) > 0:
                        price_std = price_data.std()
                        price_mean = price_data.mean()
                        
                        print(f"   Price mean: ${price_mean:.2f}")
                        print(f"   Price std: ${price_std:.2f}")
                        
                        # D·ªØ li·ªáu fake th∆∞·ªùng c√≥ mean ~2050 v√† std ~10-20
                        # D·ªØ li·ªáu th·ª±c c√≥ mean ~2000-2500 v√† std kh√°c
                        if 2040 <= price_mean <= 2060 and 10 <= price_std <= 25:
                            print("   ‚ö†Ô∏è  C√ì TH·ªÇ L√Ä D·ªÆ LI·ªÜU FAKE (mean ~2050, std ~10-20)")
                        else:
                            print("   ‚úÖ C√ì V·∫∫ L√Ä D·ªÆ LI·ªÜU TH·ª∞C T·∫æ")
                        
                        print(f"   Sample prices: {price_data.head(5).tolist()}")
        else:
            print("   ‚ùå Kh√¥ng l·∫•y ƒë∆∞·ª£c d·ªØ li·ªáu")
        
        # Test comprehensive market data
        print("\nüìä TEST COMPREHENSIVE MARKET DATA:")
        market_data = system._get_comprehensive_market_data("XAUUSDc")
        
        if not market_data.empty:
            print(f"   Data shape: {market_data.shape}")
            print(f"   Columns: {list(market_data.columns)}")
            
            if 'close' in market_data.columns:
                prices = market_data['close']
                print(f"   Price range: ${prices.min():.2f} - ${prices.max():.2f}")
                print(f"   Latest price: ${prices.iloc[-1]:.2f}")
        else:
            print("   ‚ùå Kh√¥ng l·∫•y ƒë∆∞·ª£c comprehensive market data")
            
        return True
        
    except Exception as e:
        print(f"‚ùå L·ªói khi test h·ªá th·ªëng: {e}")
        return False

def test_signal_generation():
    """Test t·∫°o signal v·ªõi d·ªØ li·ªáu th·ª±c t·∫ø"""
    print("\nüéØ TEST SIGNAL GENERATION")
    print("=" * 50)
    
    try:
        from core.ultimate_xau_system import UltimateXAUSystem, SystemConfig
        
        config = SystemConfig()
        system = UltimateXAUSystem(config)
        
        # Generate signal
        signal = system.generate_signal("XAUUSDc")
        
        print("Signal generated:")
        print(f"   Action: {signal.get('action', 'N/A')}")
        print(f"   Strength: {signal.get('strength', 'N/A')}")
        print(f"   Prediction: {signal.get('prediction', 'N/A')}")
        print(f"   Confidence: {signal.get('confidence', 'N/A')}")
        print(f"   Systems used: {signal.get('systems_used', 'N/A')}")
        
        # Ki·ªÉm tra xem c√≥ error v·ªÅ data kh√¥ng
        if 'error' in signal:
            print(f"   ‚ö†Ô∏è  Error: {signal['error']}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå L·ªói khi test signal generation: {e}")
        return False

def main():
    """Main test function"""
    print("üî• ULTIMATE XAU SYSTEM - KI·ªÇM TRA S·ª¨ D·ª§NG D·ªÆ LI·ªÜU TH·ª∞C T·∫æ")
    print("=" * 70)
    print(f"Th·ªùi gian test: {datetime.now()}")
    print()
    
    # Test 1: Ki·ªÉm tra d·ªØ li·ªáu c√≥ s·∫µn
    data_available = test_real_data_availability()
    
    if not data_available:
        print("\n‚ùå KH√îNG T√åM TH·∫§Y D·ªÆ LI·ªÜU TH·ª∞C T·∫æ!")
        print("H√£y ch·∫°y get_maximum_mt5_data_v2.py ƒë·ªÉ t·∫£i d·ªØ li·ªáu tr∆∞·ªõc")
        return
    
    # Test 2: Ki·ªÉm tra h·ªá th·ªëng s·ª≠ d·ª•ng d·ªØ li·ªáu
    system_ok = test_system_data_usage()
    
    # Test 3: Test signal generation
    if system_ok:
        test_signal_generation()
    
    print("\n" + "=" * 70)
    print("‚úÖ HO√ÄN TH√ÄNH KI·ªÇM TRA!")
    print("\nK·∫æT LU·∫¨N:")
    print("- N·∫øu th·∫•y 'C√ì V·∫∫ L√Ä D·ªÆ LI·ªÜU TH·ª∞C T·∫æ' ‚Üí H·ªá th·ªëng ƒë√£ s·ª≠ d·ª•ng d·ªØ li·ªáu th·ª±c")
    print("- N·∫øu th·∫•y 'C√ì TH·ªÇ L√Ä D·ªÆ LI·ªÜU FAKE' ‚Üí H·ªá th·ªëng v·∫´n d√πng d·ªØ li·ªáu gi·∫£ l·∫≠p")
    print("- Ki·ªÉm tra logs ƒë·ªÉ xem c√≥ load ƒë∆∞·ª£c file CSV th·ª±c t·∫ø kh√¥ng")

if __name__ == "__main__":
    main() 