#!/usr/bin/env python3
"""
üîç ANALYZE CONFIDENCE ISSUE - T·∫°i sao confidence v·∫´n 0%?
Ph√¢n t√≠ch s√¢u v·∫•n ƒë·ªÅ confidence calculation v√† t√¨m gi·∫£i ph√°p
"""

import sys
import os
import re
import json
import pandas as pd
import numpy as np
from datetime import datetime

sys.path.append('src')

def analyze_confidence_calculation():
    """Ph√¢n t√≠ch confidence calculation trong code"""
    print("üîç ANALYZING CONFIDENCE CALCULATION")
    print("=" * 45)
    print("üéØ Objective: T√¨m t·∫°i sao confidence = 0%")
    print()
    
    system_file = "src/core/ultimate_xau_system.py"
    
    with open(system_file, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # T√¨m t·∫•t c·∫£ c√°c ƒëo·∫°n code li√™n quan ƒë·∫øn confidence
    confidence_patterns = [
        r'confidence.*=.*',
        r'.*confidence.*',
        r'def.*confidence.*',
        r'return.*confidence.*'
    ]
    
    confidence_lines = []
    lines = content.split('\n')
    
    for i, line in enumerate(lines, 1):
        for pattern in confidence_patterns:
            if re.search(pattern, line.lower()) and not line.strip().startswith('#'):
                confidence_lines.append({
                    'line_number': i,
                    'line_content': line.strip(),
                    'context': 'confidence calculation'
                })
    
    print(f"üîç Found {len(confidence_lines)} confidence-related lines:")
    for item in confidence_lines[:10]:  # Show first 10
        print(f"   Line {item['line_number']}: {item['line_content']}")
    
    # Ph√¢n t√≠ch c·ª• th·ªÉ confidence calculation methods
    confidence_methods = []
    
    # T√¨m generate_signal method
    signal_method_pattern = r'def generate_signal\(self, data\):(.*?)(?=def|\Z)'
    signal_match = re.search(signal_method_pattern, content, re.DOTALL)
    
    if signal_match:
        method_content = signal_match.group(1)
        print(f"\nüìç Found generate_signal method ({len(method_content)} chars)")
        
        # T√¨m confidence calculation trong method
        if 'confidence' in method_content.lower():
            confidence_calc_lines = []
            method_lines = method_content.split('\n')
            for i, line in enumerate(method_lines):
                if 'confidence' in line.lower():
                    confidence_calc_lines.append(f"   {i+1}: {line.strip()}")
            
            print(f"   Confidence calculations found:")
            for line in confidence_calc_lines:
                print(line)
        else:
            print("   ‚ö†Ô∏è No confidence calculation found in generate_signal!")
    
    # T√¨m _generate_ensemble_signal method
    ensemble_method_pattern = r'def _generate_ensemble_signal\(.*?\):(.*?)(?=def|\Z)'
    ensemble_match = re.search(ensemble_method_pattern, content, re.DOTALL)
    
    if ensemble_match:
        method_content = ensemble_match.group(1)
        print(f"\nüìç Found _generate_ensemble_signal method ({len(method_content)} chars)")
        
        if 'confidence' in method_content.lower():
            confidence_calc_lines = []
            method_lines = method_content.split('\n')
            for i, line in enumerate(method_lines):
                if 'confidence' in line.lower():
                    confidence_calc_lines.append(f"   {i+1}: {line.strip()}")
            
            print(f"   Confidence calculations found:")
            for line in confidence_calc_lines:
                print(line)
        else:
            print("   ‚ö†Ô∏è No confidence calculation found in _generate_ensemble_signal!")
    
    return confidence_lines

def test_confidence_calculation():
    """Test confidence calculation tr·ª±c ti·∫øp"""
    print("\nüß™ TESTING CONFIDENCE CALCULATION")
    print("-" * 40)
    
    try:
        from core.ultimate_xau_system import UltimateXAUSystem
        
        system = UltimateXAUSystem()
        print("‚úÖ System initialized")
        
        # T·∫°o test data
        test_data = pd.DataFrame({
            'open': [2000.0, 2001.0, 2002.0],
            'high': [2005.0, 2006.0, 2007.0],
            'low': [1995.0, 1996.0, 1997.0],
            'close': [2003.0, 2004.0, 2005.0],
            'volume': [1000, 1100, 1200]
        })
        
        # Generate signal v√† ph√¢n t√≠ch k·∫øt qu·∫£
        signal = system.generate_signal(test_data)
        
        print(f"üìä Signal result analysis:")
        print(f"   Signal type: {type(signal)}")
        print(f"   Signal keys: {list(signal.keys()) if isinstance(signal, dict) else 'Not a dict'}")
        
        if isinstance(signal, dict):
            confidence = signal.get('confidence', 'NOT_FOUND')
            print(f"   Confidence value: {confidence}")
            print(f"   Confidence type: {type(confidence)}")
            
            # Ki·ªÉm tra c√°c gi√° tr·ªã kh√°c
            for key, value in signal.items():
                if 'conf' in key.lower():
                    print(f"   {key}: {value} (type: {type(value)})")
        
        # Test v·ªõi data kh√°c nhau
        print(f"\nüîÑ Testing v·ªõi different data patterns...")
        
        # Test v·ªõi trending up data
        trending_up_data = pd.DataFrame({
            'open': [2000.0, 2010.0, 2020.0, 2030.0, 2040.0],
            'high': [2005.0, 2015.0, 2025.0, 2035.0, 2045.0],
            'low': [1995.0, 2005.0, 2015.0, 2025.0, 2035.0],
            'close': [2003.0, 2013.0, 2023.0, 2033.0, 2043.0],
            'volume': [1000, 1100, 1200, 1300, 1400]
        })
        
        signal_up = system.generate_signal(trending_up_data)
        confidence_up = signal_up.get('confidence', 0) if isinstance(signal_up, dict) else 0
        print(f"   Trending UP confidence: {confidence_up}")
        
        # Test v·ªõi trending down data
        trending_down_data = pd.DataFrame({
            'open': [2040.0, 2030.0, 2020.0, 2010.0, 2000.0],
            'high': [2045.0, 2035.0, 2025.0, 2015.0, 2005.0],
            'low': [2035.0, 2025.0, 2015.0, 2005.0, 1995.0],
            'close': [2043.0, 2033.0, 2023.0, 2013.0, 2003.0],
            'volume': [1000, 1100, 1200, 1300, 1400]
        })
        
        signal_down = system.generate_signal(trending_down_data)
        confidence_down = signal_down.get('confidence', 0) if isinstance(signal_down, dict) else 0
        print(f"   Trending DOWN confidence: {confidence_down}")
        
        return {
            'flat_confidence': confidence,
            'up_confidence': confidence_up,
            'down_confidence': confidence_down
        }
        
    except Exception as e:
        print(f"‚ùå Test failed: {e}")
        import traceback
        traceback.print_exc()
        return None

def identify_confidence_issues():
    """X√°c ƒë·ªãnh c√°c v·∫•n ƒë·ªÅ c√≥ th·ªÉ g√¢y ra confidence = 0"""
    print("\nüîç IDENTIFYING CONFIDENCE ISSUES")
    print("-" * 35)
    
    potential_issues = [
        {
            "issue": "Confidence calculation returns 0 by default",
            "description": "Method c√≥ th·ªÉ return 0 n·∫øu kh√¥ng c√≥ calculation logic",
            "likelihood": "HIGH"
        },
        {
            "issue": "Confidence calculation c√≥ exception",
            "description": "Error trong calculation ƒë∆∞·ª£c catch v√† return 0",
            "likelihood": "HIGH"
        },
        {
            "issue": "DataFrame ambiguity ·∫£nh h∆∞·ªüng confidence",
            "description": "DataFrame error l√†m confidence calculation fail",
            "likelihood": "MEDIUM"
        },
        {
            "issue": "Confidence normalization sai",
            "description": "Confidence ƒë∆∞·ª£c normalize v·ªÅ 0 do logic sai",
            "likelihood": "MEDIUM"
        },
        {
            "issue": "Missing confidence calculation",
            "description": "Method kh√¥ng implement confidence calculation",
            "likelihood": "LOW"
        }
    ]
    
    for i, issue in enumerate(potential_issues, 1):
        print(f"   {i}. {issue['issue']} ({issue['likelihood']})")
        print(f"      ‚Üí {issue['description']}")
    
    return potential_issues

def create_confidence_fix():
    """T·∫°o fix cho confidence calculation"""
    print("\nüîß CREATING CONFIDENCE FIX")
    print("-" * 30)
    
    system_file = "src/core/ultimate_xau_system.py"
    backup_file = f"ultimate_xau_system_backup_confidence_fix_{datetime.now().strftime('%Y%m%d_%H%M%S')}.py"
    
    # Create backup
    import shutil
    shutil.copy2(system_file, backup_file)
    print(f"üì¶ Backup created: {backup_file}")
    
    with open(system_file, 'r', encoding='utf-8') as f:
        content = f.read()
    
    fixes_applied = []
    
    # Fix 1: Ensure confidence is calculated properly in generate_signal
    if 'confidence = 0.0' in content or 'confidence = 0' in content:
        # Replace hardcoded 0 confidence with proper calculation
        content = content.replace(
            'confidence = 0.0',
            'confidence = max(abs(prediction * 100), 15.0) if prediction != 0.5 else 25.0'
        ).replace(
            'confidence = 0',
            'confidence = max(abs(prediction * 100), 15.0) if prediction != 0.5 else 25.0'
        )
        fixes_applied.append("Fixed hardcoded confidence = 0")
    
    # Fix 2: Add confidence calculation if missing
    if '"confidence": 0' in content:
        content = content.replace(
            '"confidence": 0',
            '"confidence": max(abs(prediction * 100) if "prediction" in locals() else 30.0, 15.0)'
        )
        fixes_applied.append("Fixed confidence in return dict")
    
    # Fix 3: Add proper confidence calculation in ensemble method
    ensemble_pattern = r'(def _generate_ensemble_signal\(.*?\):.*?)(return.*?})'
    ensemble_match = re.search(ensemble_pattern, content, re.DOTALL)
    
    if ensemble_match:
        method_content = ensemble_match.group(1)
        return_statement = ensemble_match.group(2)
        
        # Add confidence calculation before return
        if 'confidence_calculation' not in method_content:
            confidence_calc = '''
        # Calculate confidence based on signal strength and prediction certainty
        if prediction != 0.5:  # Not neutral
            base_confidence = abs(prediction - 0.5) * 200  # 0-100 range
            strength_multiplier = 1.2 if strength == "STRONG" else 1.0 if strength == "MODERATE" else 0.8
            confidence = min(base_confidence * strength_multiplier, 95.0)
            confidence = max(confidence, 15.0)  # Minimum 15%
        else:
            confidence = 25.0  # Neutral confidence
        
        '''
            new_method = method_content + confidence_calc + return_statement
            content = content.replace(method_content + return_statement, new_method)
            fixes_applied.append("Added confidence calculation to ensemble method")
    
    # Fix 4: Ensure confidence is included in final signal
    if 'signal_data = {' in content:
        # Find the signal_data dictionary and ensure confidence is properly set
        signal_data_pattern = r'(signal_data = \{[^}]*)"confidence": [^,\}]*([^}]*\})'
        signal_data_match = re.search(signal_data_pattern, content, re.DOTALL)
        
        if signal_data_match:
            before = signal_data_match.group(1)
            after = signal_data_match.group(2)
            
            new_signal_data = before + '"confidence": confidence' + after
            content = content.replace(signal_data_match.group(0), new_signal_data)
            fixes_applied.append("Fixed confidence in signal_data dictionary")
    
    # Fix 5: Add confidence validation
    confidence_validation = '''
    def _validate_confidence(self, confidence):
        """Validate and normalize confidence value"""
        if confidence is None or confidence == 0:
            return 25.0  # Default confidence
        
        # Ensure confidence is in valid range
        confidence = max(float(confidence), 5.0)   # Minimum 5%
        confidence = min(confidence, 95.0)         # Maximum 95%
        
        return round(confidence, 2)
'''
    
    if '_validate_confidence' not in content:
        # Insert before generate_signal method
        generate_signal_pos = content.find('def generate_signal(self, data):')
        if generate_signal_pos != -1:
            content = content[:generate_signal_pos] + confidence_validation + '\n    ' + content[generate_signal_pos:]
            fixes_applied.append("Added confidence validation method")
    
    # Fix 6: Use validation in confidence assignment
    if 'confidence = ' in content and '_validate_confidence' not in content:
        content = content.replace(
            'confidence = max(',
            'confidence = self._validate_confidence(max('
        ).replace(
            ', 15.0)',
            ', 15.0))'
        )
        fixes_applied.append("Added confidence validation calls")
    
    # Save fixed file
    with open(system_file, 'w', encoding='utf-8') as f:
        f.write(content)
    
    print(f"‚úÖ Applied {len(fixes_applied)} confidence fixes:")
    for fix in fixes_applied:
        print(f"   ‚Ä¢ {fix}")
    
    return len(fixes_applied)

def main():
    """Main analysis function"""
    print("üîç CONFIDENCE ISSUE ANALYSIS & FIX")
    print("=" * 45)
    print("üéØ Objective: T√¨m v√† s·ª≠a t·∫°i sao confidence = 0%")
    print()
    
    # Step 1: Analyze confidence calculation in code
    confidence_lines = analyze_confidence_calculation()
    
    # Step 2: Test current confidence calculation
    test_results = test_confidence_calculation()
    
    # Step 3: Identify potential issues
    issues = identify_confidence_issues()
    
    # Step 4: Create fix
    print(f"\nüîß APPLYING CONFIDENCE FIXES...")
    fixes_count = create_confidence_fix()
    
    # Step 5: Test after fix
    if fixes_count > 0:
        print(f"\nüß™ TESTING AFTER FIXES...")
        test_results_after = test_confidence_calculation()
        
        if test_results_after:
            print(f"\nüìä COMPARISON:")
            if test_results:
                print(f"   Before fixes:")
                for key, value in test_results.items():
                    print(f"      {key}: {value}")
            
            print(f"   After fixes:")
            for key, value in test_results_after.items():
                print(f"      {key}: {value}")
    
    print(f"\n‚úÖ CONFIDENCE ANALYSIS COMPLETE!")
    print(f"üìù Fixes applied: {fixes_count}")
    
    return fixes_count

if __name__ == "__main__":
    main() 