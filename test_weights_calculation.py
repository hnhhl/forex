#!/usr/bin/env python3
"""
üéØ KI·ªÇM TRA WEIGHTS TH·ª∞C T·∫æ V√Ä PH√ÇN T√çCH H·ªÜ TH·ªêNG 4 C·∫§P
Test script ƒë·ªÉ x√°c ƒë·ªãnh ch√≠nh x√°c c√°ch h·ªá th·ªëng ph√¢n chia quy·ªÅn l·ª±c
"""

import sys
import os
import json
import pandas as pd
import numpy as np
from datetime import datetime

# Add src to path
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

def analyze_actual_weights():
    """Ph√¢n t√≠ch weights th·ª±c t·∫ø t·ª´ code"""
    
    print("üîç PH√ÇN T√çCH WEIGHTS TH·ª∞C T·∫æ TRONG H·ªÜ TH·ªêNG")
    print("=" * 60)
    
    # Base weights t·ª´ code th·ª±c t·∫ø
    base_weights = {
        'NeuralNetworkSystem': 0.25,           # C·∫§P 1 - Neural Networks (25%)
        'MT5ConnectionManager': 0.20,          # C·∫§P 1 - Data provider (20%)
        'AdvancedAIEnsembleSystem': 0.20,      # C·∫§P 2 - AI Ensemble (20%)
        'DataQualityMonitor': 0.15,            # C·∫§P 2 - Data validation (15%)
        'AIPhaseSystem': 0.15,                 # C·∫§P 2 - AI Phases (+12% boost) (15%)
        'RealTimeMT5DataSystem': 0.15,         # C·∫§P 2 - Real-time streaming (15%)
        'AI2AdvancedTechnologiesSystem': 0.10, # C·∫§P 3 - Advanced AI (+15% boost) (10%)
        'LatencyOptimizer': 0.10,              # C·∫§P 3 - Performance optimization (10%)
        'DemocraticSpecialistsSystem': 1.0,    # C·∫§P 4 - Democratic layer (Full voting)
        
        # Core Trading Systems (ƒë∆∞·ª£c th√™m v√†o)
        'PortfolioManager': 0.20,              # Portfolio management
        'OrderManager': 0.05,                  # Order execution
        'StopLossManager': 0.05,               # Stop loss management
        'PositionSizer': 0.10,                 # Position sizing
        'KellyCriterionCalculator': 0.10       # Kelly Criterion
    }
    
    print("üìä BASE WEIGHTS THEO CODE:")
    total_base = 0
    for system, weight in base_weights.items():
        print(f"  {system:<35}: {weight:>6.1%}")
        total_base += weight
    
    print(f"\nüìà T·ªîNG BASE WEIGHTS: {total_base:.1%}")
    print(f"‚ö†Ô∏è  V·∫§N ƒê·ªÄ: T·ªïng weights = {total_base:.1%} (v∆∞·ª£t qu√° 100%!)")
    
    return base_weights, total_base

def analyze_tier_distribution():
    """Ph√¢n t√≠ch ph√¢n chia theo 4 c·∫•p"""
    
    print("\nüèÜ PH√ÇN T√çCH PH√ÇN CHIA 4 C·∫§P")
    print("=" * 60)
    
    # Ph√¢n chia theo c·∫•p (theo thi·∫øt k·∫ø ban ƒë·∫ßu)
    tier_1_systems = {
        'NeuralNetworkSystem': 0.25,
        'MT5ConnectionManager': 0.20,
        'PortfolioManager': 0.20  # Th√™m v√†o t·ª´ Core Trading
    }
    
    tier_2_systems = {
        'AdvancedAIEnsembleSystem': 0.20,
        'DataQualityMonitor': 0.15,
        'AIPhaseSystem': 0.15,  # +12% boost ri√™ng bi·ªát
        'RealTimeMT5DataSystem': 0.15
    }
    
    tier_3_systems = {
        'AI2AdvancedTechnologiesSystem': 0.10,  # +15% boost ri√™ng bi·ªát
        'LatencyOptimizer': 0.10
    }
    
    tier_4_systems = {
        'DemocraticSpecialistsSystem': 1.0  # 18 specialists v·ªõi equal voting
    }
    
    # Core Trading Systems (c·∫ßn ph√¢n lo·∫°i l·∫°i)
    core_trading = {
        'OrderManager': 0.05,
        'StopLossManager': 0.05, 
        'PositionSizer': 0.10,
        'KellyCriterionCalculator': 0.10
    }
    
    print("ü•á C·∫§P 1 - H·ªÜ TH·ªêNG CH√çNH:")
    tier_1_total = sum(tier_1_systems.values())
    for system, weight in tier_1_systems.items():
        print(f"  {system:<35}: {weight:>6.1%}")
    print(f"  T·ªîNG C·∫§P 1: {tier_1_total:.1%}")
    
    print("\nü•à C·∫§P 2 - H·ªÜ TH·ªêNG H·ªñ TR·ª¢:")
    tier_2_total = sum(tier_2_systems.values())
    for system, weight in tier_2_systems.items():
        boost = ""
        if system == 'AIPhaseSystem':
            boost = " (+12% boost)"
        print(f"  {system:<35}: {weight:>6.1%}{boost}")
    print(f"  T·ªîNG C·∫§P 2: {tier_2_total:.1%}")
    
    print("\nü•â C·∫§P 3 - H·ªÜ TH·ªêNG PH·ª§:")
    tier_3_total = sum(tier_3_systems.values())
    for system, weight in tier_3_systems.items():
        boost = ""
        if system == 'AI2AdvancedTechnologiesSystem':
            boost = " (+15% boost)"
        print(f"  {system:<35}: {weight:>6.1%}{boost}")
    print(f"  T·ªîNG C·∫§P 3: {tier_3_total:.1%}")
    
    print("\nüó≥Ô∏è C·∫§P 4 - DEMOCRATIC LAYER:")
    tier_4_total = sum(tier_4_systems.values())
    for system, weight in tier_4_systems.items():
        print(f"  {system:<35}: {weight:>6.1%} (18 specialists)")
    print(f"  T·ªîNG C·∫§P 4: {tier_4_total:.1%}")
    
    print("\n‚öôÔ∏è CORE TRADING SYSTEMS (C·∫ßn ph√¢n lo·∫°i l·∫°i):")
    core_total = sum(core_trading.values())
    for system, weight in core_trading.items():
        print(f"  {system:<35}: {weight:>6.1%}")
    print(f"  T·ªîNG CORE TRADING: {core_total:.1%}")
    
    grand_total = tier_1_total + tier_2_total + tier_3_total + tier_4_total + core_total
    print(f"\nüìä T·ªîNG T·∫§T C·∫¢: {grand_total:.1%}")
    
    return {
        'tier_1': tier_1_total,
        'tier_2': tier_2_total, 
        'tier_3': tier_3_total,
        'tier_4': tier_4_total,
        'core_trading': core_total,
        'grand_total': grand_total
    }

def propose_optimal_weights():
    """ƒê·ªÅ xu·∫•t ph√¢n chia weights t·ªëi ∆∞u"""
    
    print("\nüéØ ƒê·ªÄ XU·∫§T H·ªÜ TH·ªêNG WEIGHTS T·ªêI ∆ØU")
    print("=" * 60)
    
    optimal_weights = {
        # C·∫§P 1 - CORE DECISION (40%)
        'NeuralNetworkSystem': 0.20,        # Primary AI engine
        'PortfolioManager': 0.15,           # Capital allocation
        'OrderManager': 0.05,               # Execution engine
        
        # C·∫§P 2 - AI ENHANCEMENT (35%)
        'AdvancedAIEnsembleSystem': 0.20,   # Multi-model consensus
        'AIPhaseSystem': 0.15,              # Performance boosting (+12% boost ri√™ng)
        
        # C·∫§P 3 - OPTIMIZATION (15%)
        'LatencyOptimizer': 0.05,           # Speed optimization
        'AI2AdvancedTechnologiesSystem': 0.10, # Advanced AI (+15% boost ri√™ng)
        
        # C·∫§P 4 - CONSENSUS (10%)
        'DemocraticSpecialistsSystem': 0.10, # Democratic validation
        
        # SUPPORT LAYER (0% voting, 100% service)
        'MT5ConnectionManager': 0.0,        # Data provider
        'DataQualityMonitor': 0.0,          # Data validator
        'RealTimeMT5DataSystem': 0.0,       # Data streamer
        'StopLossManager': 0.0,             # Risk protector
        'PositionSizer': 0.0,               # Size calculator
        'KellyCriterionCalculator': 0.0     # Optimization calculator
    }
    
    print("üéØ PH√ÇN CHIA T·ªêI ∆ØU (100% TOTAL):")
    
    # Group by tiers
    tier_1_optimal = ['NeuralNetworkSystem', 'PortfolioManager', 'OrderManager']
    tier_2_optimal = ['AdvancedAIEnsembleSystem', 'AIPhaseSystem']
    tier_3_optimal = ['LatencyOptimizer', 'AI2AdvancedTechnologiesSystem']
    tier_4_optimal = ['DemocraticSpecialistsSystem']
    support_optimal = ['MT5ConnectionManager', 'DataQualityMonitor', 'RealTimeMT5DataSystem', 
                      'StopLossManager', 'PositionSizer', 'KellyCriterionCalculator']
    
    print("\nü•á C·∫§P 1 - CORE DECISION (40%):")
    tier_1_total = 0
    for system in tier_1_optimal:
        weight = optimal_weights[system]
        tier_1_total += weight
        print(f"  {system:<35}: {weight:>6.1%}")
    print(f"  T·ªîNG C·∫§P 1: {tier_1_total:.1%}")
    
    print("\nü•à C·∫§P 2 - AI ENHANCEMENT (35%):")
    tier_2_total = 0
    for system in tier_2_optimal:
        weight = optimal_weights[system]
        tier_2_total += weight
        boost = " (+12% boost ri√™ng)" if system == 'AIPhaseSystem' else ""
        print(f"  {system:<35}: {weight:>6.1%}{boost}")
    print(f"  T·ªîNG C·∫§P 2: {tier_2_total:.1%}")
    
    print("\nü•â C·∫§P 3 - OPTIMIZATION (15%):")
    tier_3_total = 0
    for system in tier_3_optimal:
        weight = optimal_weights[system]
        tier_3_total += weight
        boost = " (+15% boost ri√™ng)" if system == 'AI2AdvancedTechnologiesSystem' else ""
        print(f"  {system:<35}: {weight:>6.1%}{boost}")
    print(f"  T·ªîNG C·∫§P 3: {tier_3_total:.1%}")
    
    print("\nüó≥Ô∏è C·∫§P 4 - CONSENSUS (10%):")
    tier_4_total = 0
    for system in tier_4_optimal:
        weight = optimal_weights[system]
        tier_4_total += weight
        print(f"  {system:<35}: {weight:>6.1%}")
    print(f"  T·ªîNG C·∫§P 4: {tier_4_total:.1%}")
    
    print("\nüìä SUPPORT LAYER (0% voting, 100% service):")
    for system in support_optimal:
        weight = optimal_weights[system]
        print(f"  {system:<35}: {weight:>6.1%} (Support only)")
    
    optimal_total = tier_1_total + tier_2_total + tier_3_total + tier_4_total
    print(f"\n‚úÖ T·ªîNG VOTING POWER: {optimal_total:.1%}")
    
    return optimal_weights

def calculate_boost_effects():
    """T√≠nh to√°n hi·ªáu ·ª©ng c·ªßa boost mechanisms"""
    
    print("\nüöÄ PH√ÇN T√çCH BOOST MECHANISMS")
    print("=" * 60)
    
    base_prediction = 0.65  # V√≠ d·ª• prediction
    
    print(f"üìä BASE PREDICTION: {base_prediction:.1%}")
    
    # AI Phases boost (+12%)
    ai_phases_boost = 0.12
    prediction_with_ai_phases = base_prediction * (1 + ai_phases_boost)
    print(f"üîÑ AI Phases Boost: +{ai_phases_boost:.1%}")
    print(f"   Prediction sau AI Phases: {prediction_with_ai_phases:.1%}")
    
    # AI2 boost (+15%)
    ai2_boost = 0.15
    prediction_with_ai2 = prediction_with_ai_phases * (1 + ai2_boost)
    print(f"ü§ñ AI2 Advanced Boost: +{ai2_boost:.1%}")
    print(f"   Prediction sau AI2: {prediction_with_ai2:.1%}")
    
    # Combined boost effect
    total_boost = (1 + ai_phases_boost) * (1 + ai2_boost) - 1
    final_prediction = base_prediction * (1 + total_boost)
    
    print(f"\nüìà T·ªîNG H·ª¢P:")
    print(f"   Combined Boost Effect: +{total_boost:.1%}")
    print(f"   Final Prediction: {final_prediction:.1%}")
    print(f"   Improvement: {(final_prediction - base_prediction)/base_prediction:.1%}")
    
    return {
        'base_prediction': base_prediction,
        'ai_phases_boost': ai_phases_boost,
        'ai2_boost': ai2_boost,
        'total_boost': total_boost,
        'final_prediction': final_prediction
    }

def analyze_democratic_layer():
    """Ph√¢n t√≠ch Democratic Layer chi ti·∫øt"""
    
    print("\nüó≥Ô∏è PH√ÇN T√çCH DEMOCRATIC LAYER CHI TI·∫æT")
    print("=" * 60)
    
    # 18 specialists theo categories
    specialist_categories = {
        'Technical Analysis': [
            'RSI_Specialist', 'MACD_Specialist', 'Bollinger_Specialist'
        ],
        'Sentiment Analysis': [
            'News_Sentiment_Specialist', 'Social_Media_Specialist', 'Market_Fear_Greed_Specialist'
        ],
        'Pattern Recognition': [
            'Chart_Pattern_Specialist', 'Candlestick_Specialist', 'Support_Resistance_Specialist'
        ],
        'Risk Management': [
            'Volatility_Specialist', 'Correlation_Specialist', 'Drawdown_Specialist'
        ],
        'Momentum Analysis': [
            'Trend_Following_Specialist', 'Mean_Reversion_Specialist', 'Breakout_Specialist'
        ],
        'Volatility Analysis': [
            'VIX_Specialist', 'ATR_Specialist', 'GARCH_Specialist'
        ]
    }
    
    total_specialists = sum(len(specialists) for specialists in specialist_categories.values())
    vote_per_specialist = 1.0 / total_specialists  # Equal voting
    
    print(f"üìä DEMOCRATIC STRUCTURE:")
    print(f"   Total Specialists: {total_specialists}")
    print(f"   Vote per Specialist: {vote_per_specialist:.3%}")
    print(f"   Categories: {len(specialist_categories)}")
    
    print(f"\nüè∑Ô∏è SPECIALIST CATEGORIES:")
    for category, specialists in specialist_categories.items():
        category_vote = len(specialists) * vote_per_specialist
        print(f"   {category:<20}: {len(specialists)} specialists ({category_vote:.1%} total vote)")
        for specialist in specialists:
            print(f"     - {specialist}")
    
    # Voting scenarios
    print(f"\nüìä VOTING SCENARIOS:")
    
    # Scenario 1: Strong consensus (16/18 agree)
    strong_consensus = 16/18
    print(f"   Strong Consensus (16/18): {strong_consensus:.1%} agreement")
    
    # Scenario 2: Weak consensus (10/18 agree)
    weak_consensus = 10/18
    print(f"   Weak Consensus (10/18): {weak_consensus:.1%} agreement")
    
    # Scenario 3: No consensus (9/18 agree)
    no_consensus = 9/18
    print(f"   No Consensus (9/18): {no_consensus:.1%} agreement")
    
    print(f"\n‚öñÔ∏è CONSENSUS THRESHOLDS:")
    print(f"   Recommended threshold: 67% (12/18 specialists)")
    print(f"   Strong signal threshold: 78% (14/18 specialists)")
    print(f"   Emergency override: 89% (16/18 specialists)")
    
    return {
        'total_specialists': total_specialists,
        'vote_per_specialist': vote_per_specialist,
        'categories': specialist_categories,
        'strong_consensus': strong_consensus,
        'weak_consensus': weak_consensus,
        'no_consensus': no_consensus
    }

def generate_implementation_code():
    """T·∫°o code implementation cho optimal weights"""
    
    print("\nüíª IMPLEMENTATION CODE")
    print("=" * 60)
    
    code = '''
def get_optimal_system_weights():
    """Optimal weights distribution for AI3.0 system"""
    return {
        # C·∫§P 1 - CORE DECISION (40%)
        'NeuralNetworkSystem': 0.20,
        'PortfolioManager': 0.15,
        'OrderManager': 0.05,
        
        # C·∫§P 2 - AI ENHANCEMENT (35%)
        'AdvancedAIEnsembleSystem': 0.20,
        'AIPhaseSystem': 0.15,  # +12% boost separate
        
        # C·∫§P 3 - OPTIMIZATION (15%)
        'LatencyOptimizer': 0.05,
        'AI2AdvancedTechnologiesSystem': 0.10,  # +15% boost separate
        
        # C·∫§P 4 - CONSENSUS (10%)
        'DemocraticSpecialistsSystem': 0.10,
        
        # SUPPORT LAYER (0% voting)
        'MT5ConnectionManager': 0.0,
        'DataQualityMonitor': 0.0,
        'RealTimeMT5DataSystem': 0.0,
        'StopLossManager': 0.0,
        'PositionSizer': 0.0,
        'KellyCriterionCalculator': 0.0
    }

def calculate_final_prediction_with_boosts(base_prediction, ai_phases_active=True, ai2_active=True):
    """Calculate final prediction with boost mechanisms"""
    prediction = base_prediction
    
    # Apply AI Phases boost (+12%)
    if ai_phases_active:
        prediction *= 1.12
        
    # Apply AI2 Advanced boost (+15%)
    if ai2_active:
        prediction *= 1.15
        
    # Ensure prediction stays within bounds
    return min(1.0, max(0.0, prediction))

def democratic_consensus_with_threshold(specialist_votes, threshold=0.67):
    """Democratic consensus with configurable threshold"""
    if len(specialist_votes) == 0:
        return 0.5  # Neutral
        
    # Count votes
    buy_votes = sum(1 for vote in specialist_votes if vote > 0.5)
    total_votes = len(specialist_votes)
    
    # Calculate consensus strength
    consensus_strength = buy_votes / total_votes
    
    # Apply threshold
    if consensus_strength >= threshold:
        return consensus_strength
    elif (1 - consensus_strength) >= threshold:
        return 1 - consensus_strength
    else:
        return 0.5  # No consensus, return neutral
    '''
    
    print(code)
    
    return code

def main():
    """Main analysis function"""
    
    print("üéØ PH√ÇN T√çCH TO√ÄN DI·ªÜN H·ªÜ TH·ªêNG 4 C·∫§P QUY·∫æT ƒê·ªäNH AI3.0")
    print("=" * 80)
    print(f"‚è∞ Th·ªùi gian ph√¢n t√≠ch: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # 1. Ph√¢n t√≠ch weights th·ª±c t·∫ø
    base_weights, total_base = analyze_actual_weights()
    
    # 2. Ph√¢n t√≠ch ph√¢n chia 4 c·∫•p
    tier_analysis = analyze_tier_distribution()
    
    # 3. ƒê·ªÅ xu·∫•t weights t·ªëi ∆∞u
    optimal_weights = propose_optimal_weights()
    
    # 4. Ph√¢n t√≠ch boost effects
    boost_analysis = calculate_boost_effects()
    
    # 5. Ph√¢n t√≠ch Democratic Layer
    democratic_analysis = analyze_democratic_layer()
    
    # 6. T·∫°o implementation code
    implementation_code = generate_implementation_code()
    
    # 7. K·∫øt lu·∫≠n v√† khuy·∫øn ngh·ªã
    print("\nüéØ K·∫æT LU·∫¨N V√Ä KHUY·∫æN NGH·ªä")
    print("=" * 60)
    
    print("‚ùå V·∫§N ƒê·ªÄ HI·ªÜN T·∫†I:")
    print(f"   - T·ªïng weights: {total_base:.1%} (v∆∞·ª£t qu√° 100%)")
    print(f"   - Democratic layer qu√° m·∫°nh: 100% voting power")
    print(f"   - Data systems c√≥ quy·ªÅn vote trading decisions")
    print(f"   - Thi·∫øu c√¢n b·∫±ng gi·ªØa prediction v√† execution")
    
    print("\n‚úÖ GI·∫¢I PH√ÅP ƒê·ªÄ XU·∫§T:")
    print("   - Rebalance weights: 40-35-15-10 distribution")
    print("   - T√°ch voting systems v√† support systems")
    print("   - Democratic layer ch·ªâ 10% ƒë·ªÉ validation")
    print("   - Boost mechanisms t√≠nh ri√™ng bi·ªát")
    
    print("\nüöÄ H√ÄNH ƒê·ªòNG C·∫¶N TH·ª∞C HI·ªÜN:")
    print("   1. Update _get_system_weight() method")
    print("   2. Implement optimal weights distribution")
    print("   3. Separate boost calculations")
    print("   4. Add democratic consensus threshold")
    print("   5. Move data systems to support layer")
    
    # Save results
    results = {
        'analysis_time': datetime.now().isoformat(),
        'current_weights': base_weights,
        'current_total': total_base,
        'tier_analysis': tier_analysis,
        'optimal_weights': optimal_weights,
        'boost_analysis': boost_analysis,
        'democratic_analysis': democratic_analysis,
        'implementation_code': implementation_code
    }
    
    with open('weights_analysis_results.json', 'w', encoding='utf-8') as f:
        json.dump(results, f, indent=2, ensure_ascii=False, default=str)
    
    print(f"\nüíæ K·∫øt qu·∫£ ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o: weights_analysis_results.json")
    
    return results

if __name__ == "__main__":
    results = main() 