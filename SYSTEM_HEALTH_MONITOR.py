import psutil
import os
import time
from datetime import datetime, timedelta

print("üîç SYSTEM HEALTH MONITOR - ULTIMATE SYSTEM V5.0")
print("="*55)

# Th√¥ng tin th·ªùi gian
current_time = datetime.now()
restart_time = datetime(2024, 6, 18, 8, 56, 0)  # Th·ªùi gian restart
elapsed_since_restart = current_time - restart_time

print(f"‚è∞ TH·ªúI GIAN HO·∫†T ƒê·ªòNG:")
print(f"  üîÑ Restart l√∫c: 08:56:00")
print(f"  üïê Hi·ªán t·∫°i: {current_time.strftime('%H:%M:%S')}")
print(f"  ‚è±Ô∏è ƒê√£ ch·∫°y: {str(elapsed_since_restart).split('.')[0]}")

# Ki·ªÉm tra process PID 3312
print(f"\nüîÑ PROCESS MONITORING:")
try:
    proc = psutil.Process(3312)
    if proc.is_running():
        memory_info = proc.memory_info()
        memory_mb = memory_info.rss / (1024*1024)
        cpu_percent = proc.cpu_percent(interval=1)
        
        # Th√¥ng tin chi ti·∫øt process
        print(f"  ‚úÖ PID 3312: ƒêANG HO·∫†T ƒê·ªòNG")
        print(f"     üíæ Memory: {memory_mb:.1f}MB")
        print(f"     üñ•Ô∏è CPU: {cpu_percent:.1f}%")
        print(f"     üìä Status: {proc.status()}")
        
        # Ph√¢n t√≠ch ho·∫°t ƒë·ªông
        if cpu_percent > 50:
            print(f"     üöÄ HIGH CPU - ƒëang training intensively")
        elif cpu_percent > 10:
            print(f"     üîÑ MODERATE CPU - ƒëang x·ª≠ l√Ω data")
        elif cpu_percent > 1:
            print(f"     üí≠ LOW CPU - ƒëang t√≠nh to√°n background")
        else:
            print(f"     üò¥ IDLE - c√≥ th·ªÉ ƒëang ch·ªù I/O")
        
        # Memory analysis
        if memory_mb > 500:
            print(f"     üìà HIGH MEMORY - neural network training")
        elif memory_mb > 400:
            print(f"     üß† NORMAL MEMORY - data processing")
        else:
            print(f"     üíæ LOW MEMORY - initialization phase")
            
    else:
        print(f"  ‚ùå Process ƒë√£ d·ª´ng")
        
except psutil.NoSuchProcess:
    print(f"  ‚ùå Process PID 3312 kh√¥ng t·ªìn t·∫°i")
except Exception as e:
    print(f"  ‚ùå L·ªói: {e}")

# Ki·ªÉm tra t·∫•t c·∫£ Python processes
print(f"\nüêç T·∫§T C·∫¢ PYTHON PROCESSES:")
python_procs = []
for proc in psutil.process_iter(['pid', 'name', 'cmdline', 'memory_info', 'cpu_percent']):
    try:
        if proc.info['name'] == 'python.exe':
            cmdline = ' '.join(proc.info['cmdline']) if proc.info['cmdline'] else ''
            memory_mb = proc.info['memory_info'].rss / (1024*1024)
            cpu_pct = proc.info['cpu_percent']
            
            python_procs.append({
                'pid': proc.info['pid'],
                'memory': memory_mb,
                'cpu': cpu_pct,
                'cmd': cmdline.split('\\')[-1] if '\\' in cmdline else cmdline[:50]
            })
    except:
        continue

for proc in python_procs:
    if 'ULTIMATE_SYSTEM_V5' in proc['cmd']:
        print(f"  üéØ PID {proc['pid']}: {proc['memory']:.1f}MB, {proc['cpu']:.1f}% CPU")
        print(f"     üìã {proc['cmd']}")
    else:
        print(f"  üìÑ PID {proc['pid']}: {proc['memory']:.1f}MB, {proc['cpu']:.1f}% CPU")

# Ki·ªÉm tra file system
print(f"\nüìÅ FILE SYSTEM STATUS:")
result_files = [f for f in os.listdir('.') if f.startswith('ULTIMATE_SYSTEM_V5_TRAINING_RESULTS_')]
print(f"  üìä Result files: {len(result_files)}")

# Ki·ªÉm tra c√°c file log/temp
temp_files = []
for f in os.listdir('.'):
    if any(ext in f.lower() for ext in ['.tmp', '.log', '.cache', '.temp']):
        try:
            size_kb = os.path.getsize(f) / 1024
            temp_files.append((f, size_kb))
        except:
            continue

if temp_files:
    print(f"  üìÑ Temp/Log files: {len(temp_files)}")
    for f, size in temp_files[-3:]:  # Show last 3
        print(f"     üìÑ {f} ({size:.1f}KB)")

# T√†i nguy√™n h·ªá th·ªëng
print(f"\nüíª SYSTEM RESOURCES:")
cpu_percent = psutil.cpu_percent(interval=1)
memory = psutil.virtual_memory()
disk = psutil.disk_usage('C:')

print(f"  üñ•Ô∏è CPU Usage: {cpu_percent:.1f}%")
print(f"  üíæ RAM: {memory.percent:.1f}% ({memory.used/1024**3:.1f}GB/{memory.total/1024**3:.1f}GB)")
print(f"  üíΩ Disk C: {disk.percent:.1f}% ({disk.free/1024**3:.1f}GB free)")

# Health status
print(f"\nüè• HEALTH STATUS:")
elapsed_minutes = elapsed_since_restart.total_seconds() / 60

if elapsed_minutes > 35:
    print(f"  ‚ö†Ô∏è RUNNING TOO LONG ({elapsed_minutes:.1f} min)")
    print(f"     C√≥ th·ªÉ c·∫ßn ki·ªÉm tra l·∫°i")
elif elapsed_minutes > 25:
    print(f"  ‚è∞ NEAR COMPLETION ({elapsed_minutes:.1f} min)")
    print(f"     S·∫Øp ho√†n th√†nh")
elif elapsed_minutes > 15:
    print(f"  üîÑ PROGRESSING WELL ({elapsed_minutes:.1f} min)")
    print(f"     ƒêang ti·∫øn tri·ªÉn t·ªët")
else:
    print(f"  üöÄ EARLY STAGE ({elapsed_minutes:.1f} min)")
    print(f"     V·∫´n trong giai ƒëo·∫°n ƒë·∫ßu")

# D·ª± ƒëo√°n
remaining_time = max(0, 25 - elapsed_minutes)
estimated_completion = current_time + timedelta(minutes=remaining_time)

print(f"\nüéØ PREDICTION:")
print(f"  ‚è∞ Estimated remaining: {remaining_time:.1f} minutes")
print(f"  üèÅ Expected completion: {estimated_completion.strftime('%H:%M:%S')}")

# Network/IO activity (if available)
try:
    io_counters = psutil.disk_io_counters()
    if io_counters:
        print(f"\nüíø DISK I/O ACTIVITY:")
        print(f"  üìñ Read: {io_counters.read_bytes/1024**2:.1f}MB")
        print(f"  üìù Write: {io_counters.write_bytes/1024**2:.1f}MB")
except:
    pass

print(f"\n{'='*55}")

# Overall assessment
if result_files:
    print(f"üéâ STATUS: COMPLETED!")
elif elapsed_minutes > 40:
    print(f"‚ö†Ô∏è STATUS: POSSIBLY STUCK - NEEDS ATTENTION")
elif cpu_percent < 1 and elapsed_minutes > 30:
    print(f"üò¥ STATUS: IDLE TOO LONG - MAY BE STUCK")
else:
    print(f"‚úÖ STATUS: HEALTHY & RUNNING")

print(f"‚è∞ Checked at: {current_time.strftime('%H:%M:%S')}")
print(f"{'='*55}") 