#!/usr/bin/env python3
"""
üéØ FINAL SYNTAX COMPLETE FIX - Fix ho√†n to√†n syntax error cu·ªëi c√πng
Gi·∫£i quy·∫øt tri·ªát ƒë·ªÉ class definition v√† indentation issues
"""

import sys
import os
import re
import ast
from datetime import datetime

sys.path.append('src')

class FinalSyntaxFixer:
    """Class fix ho√†n to√†n syntax cu·ªëi c√πng"""
    
    def __init__(self):
        self.system_file = "src/core/ultimate_xau_system.py"
        self.fixes_applied = []
        
    def create_final_backup(self):
        """T·∫°o backup cu·ªëi c√πng"""
        backup_file = f"{self.system_file}.final_syntax_backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        with open(self.system_file, 'r', encoding='utf-8') as f:
            content = f.read()
        with open(backup_file, 'w', encoding='utf-8') as f:
            f.write(content)
        print(f"‚úÖ Final backup: {backup_file}")
        return backup_file
    
    def fix_class_definition_issues(self):
        """Fix class definition issues"""
        print("üîß FIXING CLASS DEFINITION ISSUES")
        print("-" * 35)
        
        with open(self.system_file, 'r', encoding='utf-8') as f:
            content = f.read()
        
        lines = content.split('\n')
        fixed_lines = []
        fixes_count = 0
        
        i = 0
        while i < len(lines):
            line = lines[i]
            
            # Check for class definition
            if re.match(r'^\s*class\s+\w+.*:?\s*$', line):
                fixed_lines.append(line)
                
                # Ensure class definition ends with colon
                if not line.rstrip().endswith(':'):
                    fixed_lines[-1] = line.rstrip() + ':'
                    fixes_count += 1
                    print(f"üîß Added colon to class definition: {line.strip()}")
                
                # Check next line for proper indentation
                if i + 1 < len(lines):
                    next_line = lines[i + 1]
                    
                    # If next line is empty, add a pass statement
                    if not next_line.strip():
                        # Look for the next non-empty line
                        j = i + 1
                        while j < len(lines) and not lines[j].strip():
                            fixed_lines.append(lines[j])
                            j += 1
                        
                        # If no proper content follows, add pass
                        if j >= len(lines) or not lines[j].startswith('    '):
                            fixed_lines.append('    pass')
                            fixes_count += 1
                            print(f"üîß Added 'pass' to empty class")
                        
                        i = j - 1
                    
                    # If next line exists but not properly indented
                    elif next_line.strip() and not next_line.startswith('    '):
                        # Check if it's another class/function definition
                        if not re.match(r'^\s*(class|def|import|from)\s+', next_line):
                            # Add pass to complete the class
                            fixed_lines.append('    pass')
                            fixes_count += 1
                            print(f"üîß Added 'pass' to complete class definition")
            else:
                fixed_lines.append(line)
            
            i += 1
        
        if fixes_count > 0:
            new_content = '\n'.join(fixed_lines)
            with open(self.system_file, 'w', encoding='utf-8') as f:
                f.write(new_content)
            
            self.fixes_applied.append(f"Fixed {fixes_count} class definition issues")
            print(f"‚úÖ Fixed {fixes_count} class definition issues")
            return True
        else:
            print("‚úÖ No class definition issues found")
            return False
    
    def fix_multiple_assignment_line_560(self):
        """Fix multiple assignment issue ·ªü line 560"""
        print(f"\nüîß FIXING MULTIPLE ASSIGNMENT LINE 560")
        print("-" * 40)
        
        with open(self.system_file, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # Fix the specific multiple assignment pattern
        pattern = r'SYSTEM_NAME = "ULTIMATE_XAU_SUPER_SYSTEM": DEFAULT_SYMBOL = "XAUUSDc": DEFAULT_TIMEFRAME = mt5\.TIMEFRAME_M1'
        
        if re.search(pattern, content):
            replacement = '''SYSTEM_NAME = "ULTIMATE_XAU_SUPER_SYSTEM"
DEFAULT_SYMBOL = "XAUUSDc"
DEFAULT_TIMEFRAME = mt5.TIMEFRAME_M1'''
            
            content = re.sub(pattern, replacement, content)
            
            with open(self.system_file, 'w', encoding='utf-8') as f:
                f.write(content)
            
            self.fixes_applied.append("Fixed multiple assignment in line 560")
            print("‚úÖ Fixed multiple assignment in line 560")
            return True
        else:
            print("‚úÖ No multiple assignment issue found")
            return False
    
    def fix_empty_class_bodies(self):
        """Fix empty class bodies"""
        print(f"\nüîß FIXING EMPTY CLASS BODIES")
        print("-" * 30)
        
        with open(self.system_file, 'r', encoding='utf-8') as f:
            content = f.read()
        
        lines = content.split('\n')
        fixed_lines = []
        fixes_count = 0
        
        i = 0
        while i < len(lines):
            line = lines[i]
            fixed_lines.append(line)
            
            # Check for class definition
            if re.match(r'^\s*class\s+\w+.*:\s*$', line):
                class_indent = len(line) - len(line.lstrip())
                
                # Look ahead to see if class has content
                j = i + 1
                has_content = False
                
                # Skip empty lines
                while j < len(lines) and not lines[j].strip():
                    j += 1
                
                # Check if next content is properly indented for this class
                if j < len(lines):
                    next_line = lines[j]
                    next_indent = len(next_line) - len(next_line.lstrip())
                    
                    # If next line is not indented more than class, class is empty
                    if next_indent <= class_indent:
                        has_content = False
                    else:
                        has_content = True
                
                # If class is empty, add pass
                if not has_content:
                    # Add empty line and pass
                    if i + 1 < len(lines) and lines[i + 1].strip():
                        fixed_lines.append('')
                    fixed_lines.append(' ' * (class_indent + 4) + 'pass')
                    fixes_count += 1
                    print(f"üîß Added 'pass' to empty class at line {i+1}")
            
            i += 1
        
        if fixes_count > 0:
            new_content = '\n'.join(fixed_lines)
            with open(self.system_file, 'w', encoding='utf-8') as f:
                f.write(new_content)
            
            self.fixes_applied.append(f"Fixed {fixes_count} empty class bodies")
            print(f"‚úÖ Fixed {fixes_count} empty class bodies")
            return True
        else:
            print("‚úÖ No empty class bodies found")
            return False
    
    def fix_malformed_method_definitions(self):
        """Fix malformed method definitions"""
        print(f"\nüîß FIXING MALFORMED METHOD DEFINITIONS")
        print("-" * 40)
        
        with open(self.system_file, 'r', encoding='utf-8') as f:
            content = f.read()
        
        lines = content.split('\n')
        fixed_lines = []
        fixes_count = 0
        
        for i, line in enumerate(lines):
            # Check for malformed def statements
            if re.match(r'^\s*def\s+\w+.*[^:]\s*$', line.rstrip()):
                # Add missing colon
                fixed_line = line.rstrip() + ':'
                fixed_lines.append(fixed_line)
                fixes_count += 1
                print(f"üîß Added colon to method definition at line {i+1}")
            else:
                fixed_lines.append(line)
        
        if fixes_count > 0:
            new_content = '\n'.join(fixed_lines)
            with open(self.system_file, 'w', encoding='utf-8') as f:
                f.write(new_content)
            
            self.fixes_applied.append(f"Fixed {fixes_count} malformed method definitions")
            print(f"‚úÖ Fixed {fixes_count} malformed method definitions")
            return True
        else:
            print("‚úÖ No malformed method definitions found")
            return False
    
    def comprehensive_syntax_check(self):
        """Comprehensive syntax check"""
        print(f"\nüîç COMPREHENSIVE SYNTAX CHECK")
        print("-" * 30)
        
        with open(self.system_file, 'r', encoding='utf-8') as f:
            content = f.read()
        
        try:
            ast.parse(content)
            print("‚úÖ Syntax validation: PASSED")
            return True
        except SyntaxError as e:
            print(f"‚ùå Syntax Error: Line {e.lineno} - {e.msg}")
            print(f"üìù Error text: {e.text}")
            
            # Show context
            lines = content.split('\n')
            if e.lineno <= len(lines):
                start = max(0, e.lineno - 3)
                end = min(len(lines), e.lineno + 3)
                
                print(f"\nüìÑ Context around line {e.lineno}:")
                for i in range(start, end):
                    line_num = i + 1
                    marker = ">>> " if line_num == e.lineno else "    "
                    print(f"{marker}{line_num:4d}: {lines[i]}")
            
            return False
        except Exception as e:
            print(f"‚ùå Parse Error: {e}")
            return False
    
    def final_system_validation(self):
        """Final system validation"""
        print(f"\nüß™ FINAL SYSTEM VALIDATION")
        print("-" * 25)
        
        try:
            # Test import
            from core.ultimate_xau_system import UltimateXAUSystem
            print("‚úÖ Import: SUCCESS")
            
            # Test initialization
            system = UltimateXAUSystem()
            print("‚úÖ Initialization: SUCCESS")
            
            # Test signal generation
            signal = system.generate_signal()
            if isinstance(signal, dict) and 'action' in signal:
                print(f"‚úÖ Signal Generation: SUCCESS - {signal.get('action')} ({signal.get('confidence')}%)")
                return True
            else:
                print("‚ö†Ô∏è Signal Generation: PARTIAL")
                return False
                
        except Exception as e:
            print(f"‚ùå System validation failed: {e}")
            return False
    
    def run_final_complete_fix(self):
        """Ch·∫°y fix ho√†n to√†n cu·ªëi c√πng"""
        print("üéØ FINAL SYNTAX COMPLETE FIX")
        print("=" * 40)
        print("üéØ Objective: Fix ho√†n to√†n t·∫•t c·∫£ syntax errors")
        print()
        
        # Create final backup
        self.create_final_backup()
        
        # Run all fixes
        steps = [
            ("Fix Multiple Assignment", self.fix_multiple_assignment_line_560),
            ("Fix Class Definitions", self.fix_class_definition_issues),
            ("Fix Empty Class Bodies", self.fix_empty_class_bodies),
            ("Fix Method Definitions", self.fix_malformed_method_definitions),
            ("Syntax Check", self.comprehensive_syntax_check),
            ("System Validation", self.final_system_validation)
        ]
        
        results = {}
        for step_name, step_func in steps:
            print(f"\nüîÑ {step_name}...")
            try:
                result = step_func()
                results[step_name] = "‚úÖ SUCCESS" if result else "‚ö†Ô∏è PARTIAL"
            except Exception as e:
                results[step_name] = f"‚ùå ERROR: {e}"
                print(f"‚ùå Error in {step_name}: {e}")
        
        # Summary
        print(f"\nüìã FINAL FIX SUMMARY")
        print("=" * 25)
        print(f"üîß Fixes Applied: {len(self.fixes_applied)}")
        
        if self.fixes_applied:
            print(f"\n‚úÖ FIXES APPLIED:")
            for i, fix in enumerate(self.fixes_applied, 1):
                print(f"   {i}. {fix}")
        
        print(f"\nüéØ STEP RESULTS:")
        for step, result in results.items():
            print(f"   {result} {step}")
        
        # Calculate success rate
        success_count = sum(1 for result in results.values() if "‚úÖ" in result)
        total_count = len(results)
        success_rate = success_count / total_count * 100
        
        print(f"\nüìä Success Rate: {success_count}/{total_count} ({success_rate:.1f}%)")
        
        if success_rate >= 95:
            final_status = "üåü HO√ÄN TO√ÄN TH√ÄNH C√îNG"
            print("üéâ H·ªÜ TH·ªêNG ƒê√É ƒê∆Ø·ª¢C FIX TRI·ªÜT ƒê·ªÇ!")
        elif success_rate >= 85:
            final_status = "‚úÖ TH√ÄNH C√îNG T·ªêT"
            print("‚úÖ H·ªá th·ªëng ƒë√£ ƒë∆∞·ª£c fix t·ªët!")
        elif success_rate >= 70:
            final_status = "‚ö†Ô∏è TH√ÄNH C√îNG PARTIAL"
            print("‚ö†Ô∏è H·ªá th·ªëng ƒë∆∞·ª£c fix partial, c·∫ßn check th√™m")
        else:
            final_status = "‚ùå C·∫¶N TH√äM C√îNG VI·ªÜC"
            print("‚ùå C·∫ßn th√™m c√¥ng vi·ªác ƒë·ªÉ ho√†n thi·ªán")
        
        print(f"üéØ Final Status: {final_status}")
        
        return {
            'fixes_applied': self.fixes_applied,
            'step_results': results,
            'success_rate': success_rate,
            'final_status': final_status
        }

def main():
    """Main function"""
    fixer = FinalSyntaxFixer()
    result = fixer.run_final_complete_fix()
    
    print(f"\nüéØ FINAL SYNTAX FIX COMPLETED!")
    print(f"üìä Success Rate: {result['success_rate']:.1f}%")
    print(f"üéØ Status: {result['final_status']}")
    
    return result

if __name__ == "__main__":
    main() 