#!/usr/bin/env python3
"""
Re-Training XAU/USDc System v·ªõi Improvements
Ultimate XAU Super System V4.0
"""

import MetaTrader5 as mt5
import pandas as pd
import numpy as np
import tensorflow as tf
from datetime import datetime
import logging
import json
import os
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
import warnings
warnings.filterwarnings('ignore')

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def retrain_system():
    """Re-training h·ªá th·ªëng v·ªõi data m·ªõi v√† improvements"""
    
    print("üîÑ RE-TRAINING XAU/USDc SYSTEM")
    print("=" * 60)
    print("üéØ M·ª•c ti√™u:")
    print("  ‚Ä¢ C·∫≠p nh·∫≠t v·ªõi data m·ªõi nh·∫•t")
    print("  ‚Ä¢ T·ªëi ∆∞u hyperparameters")
    print("  ‚Ä¢ C·∫£i thi·ªán accuracy")
    print("  ‚Ä¢ Training M1 v√† M5 models")
    print("=" * 60)
    
    # Backup models c≈©
    backup_dir = f"training/xauusdc/backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
    os.makedirs(backup_dir, exist_ok=True)
    
    # Ch·∫°y training m·ªõi
    from XAUUSDC_TRAINING_SYSTEM_OPTIMIZED import XAUUSDcTrainingSystem
    
    system = XAUUSDcTrainingSystem()
    results = system.run_training()
    
    if results:
        print("\n‚úÖ RE-TRAINING TH√ÄNH C√îNG!")
        print("üìä K·∫øt qu·∫£ ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t")
    else:
        print("\n‚ùå RE-TRAINING TH·∫§T B·∫†I!")
        
    return results

if __name__ == "__main__":
    retrain_system() 